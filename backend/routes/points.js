import express from 'express';
import Points from '../models/Points.js';
import { authenticate, requireAdmin } from '../middleware/auth.js';

const router = express.Router();

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.use(authenticate);

// –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –±–∞–ª–ª—ã
router.get('/my', async (req, res) => {
  try {
    const pool = (await import('../config/database.js')).default;
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const result = await pool.query(
      'SELECT id, username, full_name, email, points FROM users WHERE id = $1',
      [req.user.id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const user = result.rows[0];
    
    res.json({ 
      totalPoints: user.points || 0,
      user: {
        id: user.id,
        username: user.username,
        full_name: user.full_name,
        email: user.email
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
router.post('/add', requireAdmin, async (req, res) => {
  try {
    const { userId, points, reason } = req.body;

    if (!userId || points === undefined) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏ points' 
      });
    }

    if (typeof points !== 'number' || points === 0) {
      return res.status(400).json({ 
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –Ω–µ —Ä–∞–≤–Ω–æ 0' 
      });
    }

    const updatedUser = await Points.addPoints(userId, points, reason);

    if (!updatedUser) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      message: `–ë–∞–ª–ª—ã ${points > 0 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã' : '—Å–ø–∏—Å–∞–Ω—ã'} —É—Å–ø–µ—à–Ω–æ`,
      user: updatedUser
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
router.put('/set', requireAdmin, async (req, res) => {
  try {
    const { userId, points } = req.body;

    if (!userId || points === undefined) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏ points' 
      });
    }

    if (typeof points !== 'number' || points < 0) {
      return res.status(400).json({ 
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' 
      });
    }

    const updatedUser = await Points.setPoints(userId, points);

    if (!updatedUser) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      message: '–ë–∞–ª–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      user: updatedUser
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–ª–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –±–∞–ª–ª–∞–º (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º)
router.get('/top-students', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;
    const topStudents = await Points.getTopStudents(limit);
    
    res.json({ students: topStudents });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã –¥—Ä—É–≥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
router.post('/transfer', async (req, res) => {
  console.log('üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω!');
  console.log('Body:', req.body);
  console.log('User:', req.user);
  
  try {
    const { recipient_id, amount, message } = req.body;
    const senderId = req.user.id;

    console.log('üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –±–∞–ª–ª–æ–≤:', { senderId, recipient_id, amount, message });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!recipient_id || !amount) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤' 
      });
    }

    if (senderId === recipient_id) {
      return res.status(400).json({ 
        error: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ' 
      });
    }

    const transferAmount = parseInt(amount);
    if (isNaN(transferAmount) || transferAmount <= 0) {
      return res.status(400).json({ 
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' 
      });
    }

    const pool = (await import('../config/database.js')).default;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderResult = await pool.query(
      'SELECT id, username, full_name, points FROM users WHERE id = $1',
      [senderId]
    );

    if (senderResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const sender = senderResult.rows[0];
    console.log('üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', sender);

    if (sender.points < transferAmount) {
      return res.status(400).json({ 
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –£ –≤–∞—Å ${sender.points} –±–∞–ª–ª–æ–≤` 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipientResult = await pool.query(
      'SELECT id, username, full_name, points FROM users WHERE id = $1',
      [recipient_id]
    );

    if (recipientResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const recipient = recipientResult.rows[0];
    console.log('üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', recipient);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const updateSenderResult = await pool.query(
        'UPDATE users SET points = points - $1 WHERE id = $2 RETURNING points',
        [transferAmount, senderId]
      );
      console.log('‚úÖ –°–ø–∏—Å–∞–Ω–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', updateSenderResult.rows[0]?.points);

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      const updateRecipientResult = await pool.query(
        'UPDATE users SET points = points + $1 WHERE id = $2 RETURNING points',
        [transferAmount, recipient_id]
      );
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:', updateRecipientResult.rows[0]?.points);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
      if (!updateSenderResult.rows[0] || !updateRecipientResult.rows[0]) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      }

      const newSenderBalance = updateSenderResult.rows[0].points;
      const newRecipientBalance = updateRecipientResult.rows[0].points;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await pool.query(
          `INSERT INTO points_history (user_id, points_change, reason, admin_id, created_at) 
           VALUES ($1, $2, $3, NULL, NOW())`,
          [
            senderId, 
            -transferAmount, 
            `–ü–µ—Ä–µ–¥–∞—á–∞ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipient.full_name || recipient.username}${message ? ': ' + message : ''}`
          ]
        );

        // –î–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        await pool.query(
          `INSERT INTO points_history (user_id, points_change, reason, admin_id, created_at) 
           VALUES ($1, $2, $3, NULL, NOW())`,
          [
            recipient_id, 
            transferAmount, 
            `–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –æ—Ç ${sender.full_name || sender.username}${message ? ': ' + message : ''}`
          ]
        );
      } catch (historyError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log('–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ (—Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å):', historyError.message);
      }
      
      console.log('‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');

      res.json({
        message: '–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã',
        transfer: {
          from: {
            id: sender.id,
            username: sender.username,
            full_name: sender.full_name,
            new_balance: newSenderBalance
          },
          to: {
            id: recipient.id,
            username: recipient.username,
            full_name: recipient.full_name,
            new_balance: newRecipientBalance
          },
          amount: transferAmount,
          message: message || null
        }
      });
    } catch (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', updateError);
      throw updateError;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –±–∞–ª–ª–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/history/:userId?', async (req, res) => {
  try {
    const userId = req.params.userId ? parseInt(req.params.userId) : req.user.id;
    
    // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é, –∞–¥–º–∏–Ω—ã - –ª—é–±—É—é
    if (req.user.role === 'student' && req.user.id !== userId) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const pool = (await import('../config/database.js')).default;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const historyResult = await pool.query(
      `SELECT 
        ph.id,
        ph.points_change,
        ph.reason,
        ph.admin_id,
        ph.created_at,
        a.username as admin_username,
        a.full_name as admin_name
      FROM points_history ph
      LEFT JOIN users a ON ph.admin_id = a.id
      WHERE ph.user_id = $1
      ORDER BY ph.created_at DESC
      LIMIT 100`,
      [userId]
    );

    res.json({ 
      history: historyResult.rows 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –≥—Ä—É–ø–ø –ø–æ –±–∞–ª–ª–∞–º (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º)
router.get('/top-groups', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;
    const topGroups = await Points.getTopGroups(limit);
    
    res.json({ groups: topGroups });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –≥—Ä—É–ø–ø:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/student/:id', async (req, res) => {
  try {
    const userId = parseInt(req.params.id);
    
    // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–∞–ª–ª—ã, –∞–¥–º–∏–Ω—ã - –ª—é–±—ã–µ
    if (req.user.role === 'student' && req.user.id !== userId) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const student = await Points.getStudentPoints(userId);
    
    if (!student) {
      return res.status(404).json({ error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({ student });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
