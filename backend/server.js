import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { initDatabase } from './config/database.js';
import pool from './config/database.js';
import authRoutes from './routes/auth.js';
import usersRoutes from './routes/users.js';
import groupsRoutes from './routes/groups.js';
import pointsRoutes from './routes/points.js';
import chatRoutes from './routes/chat.js';
import testsRoutes from './routes/tests.js';
import homeworksRoutes from './routes/homeworks.js';
import typingRoutes from './routes/typing.js';
import gameRoutes from './routes/game.js';
import shopRoutes from './routes/shop.js';
import adminShopRoutes from './routes/admin-shop.js';
import knowledgeBaseRoutes from './routes/knowledge-base.js';
import updatesRoutes from './routes/updates.js';
import adminUpdatesRoutes from './routes/admin-updates.js';
import projectsRoutes from './routes/projects-pg.js';
import submissionsRoutes from './routes/submissions.js';
import aiRoutes from './routes/ai.js';
import chessRoutes from './routes/chess.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const httpServer = createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.IO
const corsOrigin = process.env.CORS_ORIGIN ? process.env.CORS_ORIGIN.split(',') : '*';
const io = new Server(httpServer, {
  cors: {
    origin: corsOrigin,
    methods: ['GET', 'POST'],
    credentials: true
  },
  transports: ['websocket'],
  allowEIO3: true,
  pingTimeout: 60000,
  pingInterval: 25000,
  upgradeTimeout: 10000,
  perMessageDeflate: false
});

const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/uploads/shop', express.static(path.join(__dirname, 'uploads', 'shop')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', usersRoutes);
app.use('/api/groups', groupsRoutes);
app.use('/api/points', pointsRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api/tests', testsRoutes);
app.use('/api/homeworks', homeworksRoutes);
app.use('/api/typing', typingRoutes);
app.use('/api/game', gameRoutes);
app.use('/api/shop', shopRoutes);
app.use('/api/admin/shop', adminShopRoutes);
app.use('/api/knowledge-base', knowledgeBaseRoutes);
app.use('/api/updates', updatesRoutes);
app.use('/api/admin/updates', adminUpdatesRoutes);
app.use('/api/projects', projectsRoutes);
app.use('/api/submissions', submissionsRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/chess', chessRoutes);

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({ message: 'Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// WebSocket –æ–±—Ä–∞–±–æ—Ç–∫–∞
const activeUsers = new Map(); // userId -> socketId

io.on('connection', (socket) => {
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('register', async (userId) => {
    console.log(`üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å register –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, socket: ${socket.id}`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ò —ç—Ç–æ –¥—Ä—É–≥–æ–π —Å–æ–∫–µ—Ç
    const oldSocketId = activeUsers.get(userId);
    if (oldSocketId && oldSocketId !== socket.id) {
      console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, —Å—Ç–∞—Ä—ã–π socket: ${oldSocketId}, –Ω–æ–≤—ã–π: ${socket.id}`);
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ–∫–µ—Ç
      const oldSocket = io.sockets.sockets.get(oldSocketId);
      if (oldSocket) {
        oldSocket.disconnect(true);
      }
    } else if (oldSocketId === socket.id) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —ç—Ç–∏–º —Å–æ–∫–µ—Ç–æ–º ${socket.id}`);
      // –ù–µ –≤—ã—Ö–æ–¥–∏–º, –∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    }
    
    activeUsers.set(userId, socket.id);
    socket.userId = userId;
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    socket.join(`user-${userId}`);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ user-${userId}, socket: ${socket.id}`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.size}`);
    console.log(`üìã –ö–æ–º–Ω–∞—Ç—ã —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, Array.from(socket.rooms));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–æ–Ω–ª–∞–π–Ω" –≤ –ë–î
    try {
      await pool.query(
        'UPDATE users SET is_online = TRUE, last_seen = NOW() WHERE id = $1',
        [userId]
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      io.emit('user-online', { userId, socketId: socket.id });
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–Ω–ª–∞–π–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ user-${userId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  socket.on('set-online', async (userId) => {
    try {
      await pool.query(
        'UPDATE users SET is_online = TRUE, last_seen = NOW() WHERE id = $1',
        [userId]
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      io.emit('user-online', { userId, socketId: socket.id });
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ–Ω–ª–∞–π–Ω`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  socket.on('join-chat', (chatId) => {
    socket.join(`chat-${chatId}`);
    console.log(`üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}`);
  });

  // –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
  socket.on('leave-chat', (chatId) => {
    socket.leave(`chat-${chatId}`);
    console.log(`üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ${chatId}`);
  });

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç
  socket.on('typing', (data) => {
    socket.to(`chat-${data.chatId}`).emit('user-typing', {
      userId: socket.userId,
      chatId: data.chatId
    });
  });

  // –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
  socket.on('mark-read', (chatId) => {
    io.to(`chat-${chatId}`).emit('messages-read', {
      chatId: chatId,
      userId: socket.userId
    });
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ ${chatId}`);
  });

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  socket.on('typing-start', ({ chatId, userName }) => {
    socket.to(`chat-${chatId}`).emit('user-typing', {
      chatId: chatId,
      userId: socket.userId,
      userName: userName
    });
  });

  socket.on('typing-stop', ({ chatId }) => {
    socket.to(`chat-${chatId}`).emit('user-stop-typing', {
      chatId: chatId,
      userId: socket.userId
    });
  });

  // –®–∞—Ö–º–∞—Ç—ã: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
  socket.on('join-chess-game', (gameId) => {
    socket.join(`chess-${gameId}`);
    console.log(`‚ôüÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä–µ ${gameId}`);
  });

  // –®–∞—Ö–º–∞—Ç—ã: –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É
  socket.on('leave-chess-game', (gameId) => {
    socket.leave(`chess-${gameId}`);
    console.log(`‚ôüÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –ø–æ–∫–∏–Ω—É–ª —à–∞—Ö–º–∞—Ç–Ω—É—é –∏–≥—Ä—É ${gameId}`);
  });

  // –®–∞—Ö–º–∞—Ç—ã: —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
  socket.on('chess-move', async (data) => {
    const { gameId, move, position } = data;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –±–∞–∑—ã
      const result = await pool.query(
        'SELECT white_time_left, black_time_left FROM chess_games WHERE id = $1',
        [gameId]
      );
      
      if (result.rows.length > 0) {
        const { white_time_left, black_time_left } = result.rows[0];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
        socket.to(`chess-${gameId}`).emit('chess-move-made', {
          move,
          position,
          playerId: socket.userId,
          whiteTimeLeft: white_time_left,
          blackTimeLeft: black_time_left
        });
        
        console.log(`‚ôüÔ∏è –•–æ–¥ –≤ –∏–≥—Ä–µ ${gameId}: ${move}, —Ç–∞–π–º–µ—Ä—ã - white: ${white_time_left}s, black: ${black_time_left}s`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ö–æ–¥–∞:', error);
    }
  });

  // –®–∞—Ö–º–∞—Ç—ã: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∑–æ–≤–∞
  socket.on('chess-challenge-sent', (data) => {
    const { opponentId, gameId, challengerName } = data;
    console.log(`‚ôüÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ chess-challenge-sent:`, data);
    console.log(`‚ôüÔ∏è –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—á–µ–ª–ª–µ–Ω–¥–∂–µ—Ä): ${socket.userId}`);
    console.log(`‚ôüÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${opponentId}`);
    console.log(`‚ôüÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É: user-${opponentId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤ activeUsers
    const opponentSocketId = activeUsers.get(parseInt(opponentId));
    console.log(`‚ôüÔ∏è Socket ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${opponentSocketId}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
    const emitResult = io.to(`user-${opponentId}`).emit('chess-challenge-received', {
      gameId,
      challengerId: socket.userId,
      challengerName
    });
    
    console.log(`‚ôüÔ∏è –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É user-${opponentId}`);
    
    // –î—É–±–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é –ø–æ socket ID –µ—Å–ª–∏ –µ—Å—Ç—å
    if (opponentSocketId) {
      io.to(opponentSocketId).emit('chess-challenge-received', {
        gameId,
        challengerId: socket.userId,
        challengerName
      });
      console.log(`‚ôüÔ∏è –°–æ–±—ã—Ç–∏–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ socket ${opponentSocketId}`);
    }
  });

  // –®–∞—Ö–º–∞—Ç—ã: –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞
  socket.on('chess-challenge-accepted', (data) => {
    const { gameId, challengerId } = data;
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ—Ä–∞
    io.to(`user-${challengerId}`).emit('chess-challenge-accepted-notification', {
      gameId,
      acceptorId: socket.userId
    });
    console.log(`‚ôüÔ∏è –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç –¥–ª—è –∏–≥—Ä—ã ${gameId}`);
  });

  // –®–∞—Ö–º–∞—Ç—ã: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
  socket.on('chess-challenge-declined', (data) => {
    const { gameId, challengerId } = data;
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ—Ä–∞
    io.to(`user-${challengerId}`).emit('chess-challenge-declined-notification', {
      gameId,
      declinerId: socket.userId
    });
    console.log(`‚ôüÔ∏è –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–ª—è –∏–≥—Ä—ã ${gameId}`);
  });

  // –®–∞—Ö–º–∞—Ç—ã: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('chess-game-ended', (data) => {
    const { gameId, result, reason } = data;
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    io.to(`chess-${gameId}`).emit('chess-game-finished', {
      gameId,
      result,
      reason
    });
    console.log(`‚ôüÔ∏è –ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result} (${reason})`);
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', async () => {
    if (socket.userId) {
      activeUsers.delete(socket.userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–æ—Ñ–ª–∞–π–Ω" –≤ –ë–î
      try {
        await pool.query(
          'UPDATE users SET is_online = FALSE, last_seen = NOW() WHERE id = $1',
          [socket.userId]
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω
        io.emit('user-offline', { userId: socket.userId });
        console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏ –æ—Ñ–ª–∞–π–Ω`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
      }
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    httpServer.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
      console.log(`üìä PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
      console.log(`üí¨ WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

startServer();

export { io };
