import pool from '../config/database.js';

async function createKnowledgeBaseTables() {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');

    // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await client.query(`
      CREATE TABLE IF NOT EXISTS kb_categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        icon VARCHAR(10) DEFAULT 'üìö',
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π
    await client.query(`
      CREATE TABLE IF NOT EXISTS kb_articles (
        id SERIAL PRIMARY KEY,
        title VARCHAR(500) NOT NULL,
        category_id INTEGER REFERENCES kb_categories(id) ON DELETE CASCADE,
        description TEXT,
        content TEXT NOT NULL,
        published BOOLEAN DEFAULT true,
        views INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP
      )
    `);

    // –ò–Ω–¥–µ–∫—Å—ã
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_kb_articles_category 
      ON kb_articles(category_id)
    `);

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_kb_articles_published 
      ON kb_articles(published)
    `);

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_kb_articles_deleted 
      ON kb_articles(deleted_at)
    `);

    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_kb_categories_deleted 
      ON kb_categories(deleted_at)
    `);

    // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
    const categoriesCount = await client.query('SELECT COUNT(*) FROM kb_categories WHERE deleted_at IS NULL');
    
    if (parseInt(categoriesCount.rows[0].count) === 0) {
      // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = [
        ['–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', 'üíª', '–ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'],
        ['Web-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'üåê', 'HTML, CSS, JavaScript –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏'],
        ['–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'üóÑÔ∏è', 'SQL –∏ NoSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
        ['–ê–ª–≥–æ—Ä–∏—Ç–º—ã', 'üßÆ', '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã'],
        ['Git –∏ GitHub', 'üîÄ', '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π']
      ];

      for (const [name, icon, description] of categories) {
        await client.query(
          'INSERT INTO kb_categories (name, icon, description) VALUES ($1, $2, $3)',
          [name, icon, description]
        );
      }

      // –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–µ–π
      await client.query(`
        INSERT INTO kb_articles (title, category_id, description, content, published) VALUES
        (
          '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript',
          1,
          '–û—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞ JavaScript –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
          '<h1>–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript</h1><p>JavaScript ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.</p><h2>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏</h2><h3>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</h3><pre>let name = "–ò–≤–∞–Ω";\nconst age = 25;\nvar city = "–ê–ª–º–∞—Ç—ã";</pre><h3>–§—É–Ω–∫—Ü–∏–∏</h3><pre>function greet(name) {\n  return "–ü—Ä–∏–≤–µ—Ç, " + name + "!";\n}\n\nconsole.log(greet("–ú–∏—Ä"));</pre>',
          true
        ),
        (
          'HTML5 –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å—Ç–∫–∞',
          2,
          '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã HTML5',
          '<h1>HTML5 –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å—Ç–∫–∞</h1><p>HTML5 –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</p><h2>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏</h2><ul><li>&lt;header&gt; - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li><li>&lt;nav&gt; - –ù–∞–≤–∏–≥–∞—Ü–∏—è</li><li>&lt;main&gt; - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç</li><li>&lt;article&gt; - –°—Ç–∞—Ç—å—è</li><li>&lt;section&gt; - –°–µ–∫—Ü–∏—è</li><li>&lt;footer&gt; - –ü–æ–¥–≤–∞–ª</li></ul>',
          true
        ),
        (
          '–û—Å–Ω–æ–≤—ã SQL',
          3,
          '–Ø–∑—ã–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
          '<h1>–û—Å–Ω–æ–≤—ã SQL</h1><p>SQL (Structured Query Language) ‚Äî —è–∑—ã–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p><h2>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</h2><h3>SELECT</h3><pre>SELECT * FROM users;\nSELECT name, email FROM users WHERE age > 18;</pre><h3>INSERT</h3><pre>INSERT INTO users (name, email, age)\nVALUES (''–ò–≤–∞–Ω'', ''ivan@example.com'', 25);</pre>',
          true
        )
      `);

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã');
    }

    await client.query('COMMIT');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:', error);
    throw error;
  } finally {
    client.release();
  }
}

export default createKnowledgeBaseTables;
