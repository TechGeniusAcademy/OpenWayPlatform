version: '3.8'

services:
  # PostgreSQL - основная база данных
  postgres:
    image: postgres:15-alpine
    container_name: hakaton_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: hakaton_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hakaton_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - база данных для тестов
  mongodb:
    image: mongo:7-jammy
    container_name: hakaton_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: test_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - hakaton_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test_db --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hakaton_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hakaton_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      MONGODB_URI: mongodb://mongodb:27017/test_db
      JWT_SECRET: ${JWT_SECRET}
      DOCKER_HOST: unix:///var/run/docker.sock
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_FULL_NAME: ${ADMIN_FULL_NAME:-Администратор}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/projects:/app/projects
      - /var/run/docker.sock:/var/run/docker.sock  # Для создания студенческих БД
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - hakaton_network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hakaton_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - hakaton_network

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  hakaton_network:
    driver: bridge
