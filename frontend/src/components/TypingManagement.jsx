import React, { useState, useEffect } from 'react';
import api from '../utils/api';
import './TypingManagement.css';

const TypingManagement = () => {
  const [statistics, setStatistics] = useState(null);
  const [userStats, setUserStats] = useState([]);
  const [groupStats, setGroupStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [userHistory, setUserHistory] = useState([]);
  const [filters, setFilters] = useState({
    period: 'week', // week, month, all
    sortBy: 'wpm', // wpm, accuracy, testsCount
    order: 'desc'
  });

  useEffect(() => {
    fetchAllStatistics();
  }, [filters]);

  const fetchAllStatistics = async () => {
    try {
      setLoading(true);
      const [statsResponse, usersResponse, groupsResponse] = await Promise.all([
        api.get('/typing/admin/statistics'),
        api.get(`/typing/admin/users?period=${filters.period}&sortBy=${filters.sortBy}&order=${filters.order}`),
        api.get('/typing/admin/groups')
      ]);
      
      setStatistics(statsResponse.data);
      setUserStats(usersResponse.data);
      setGroupStats(groupsResponse.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const fetchUserHistory = async (userId) => {
    try {
      const response = await api.get(`/typing/admin/user/${userId}/history`);
      setUserHistory(response.data);
      setSelectedUser(userId);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    }
  };

  const formatDuration = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getProficiencyLevel = (wpm) => {
    if (wpm >= 60) return { level: '–≠–∫—Å–ø–µ—Ä—Ç', color: '#4CAF50' };
    if (wpm >= 40) return { level: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', color: '#2196F3' };
    if (wpm >= 25) return { level: '–°—Ä–µ–¥–Ω–∏–π', color: '#FF9800' };
    return { level: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', color: '#F44336' };
  };

  if (loading) {
    return (
      <div className="typing-management">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="typing-management">
        <div className="error-message">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button onClick={fetchAllStatistics}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        </div>
      </div>
    );
  }

  return (
    <div className="typing-management">
      <div className="typing-header">
        <h2>‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–æ–º</h2>
        <div className="filters">
          <select 
            value={filters.period} 
            onChange={(e) => setFilters({...filters, period: e.target.value})}
          >
            <option value="week">–ó–∞ –Ω–µ–¥–µ–ª—é</option>
            <option value="month">–ó–∞ –º–µ—Å—è—Ü</option>
            <option value="all">–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è</option>
          </select>
          <select 
            value={filters.sortBy} 
            onChange={(e) => setFilters({...filters, sortBy: e.target.value})}
          >
            <option value="wpm">–ü–æ —Å–∫–æ—Ä–æ—Å—Ç–∏</option>
            <option value="accuracy">–ü–æ —Ç–æ—á–Ω–æ—Å—Ç–∏</option>
            <option value="testsCount">–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–µ—Å—Ç–æ–≤</option>
          </select>
          <select 
            value={filters.order} 
            onChange={(e) => setFilters({...filters, order: e.target.value})}
          >
            <option value="desc">–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
            <option value="asc">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
          </select>
        </div>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {statistics && (
        <div className="overview-stats">
          <div className="stat-card">
            <div className="stat-icon">üë•</div>
            <div className="stat-content">
              <h3>{statistics.totalUsers}</h3>
              <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">üìä</div>
            <div className="stat-content">
              <h3>{statistics.totalTests}</h3>
              <p>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">‚ö°</div>
            <div className="stat-content">
              <h3>{statistics.averageWpm}</h3>
              <p>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å (–∑–Ω/–º–∏–Ω)</p>
            </div>
          </div>
          <div className="stat-card">
            <div className="stat-icon">üéØ</div>
            <div className="stat-content">
              <h3>{statistics.averageAccuracy}%</h3>
              <p>–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</p>
            </div>
          </div>
        </div>
      )}

      <div className="stats-container">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º */}
        <div className="users-stats">
          <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
          <div className="users-table">
            <div className="table-header">
              <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
              <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
              <span>–¢–æ—á–Ω–æ—Å—Ç—å</span>
              <span>–¢–µ—Å—Ç–æ–≤</span>
              <span>–£—Ä–æ–≤–µ–Ω—å</span>
              <span>–î–µ–π—Å—Ç–≤–∏—è</span>
            </div>
            {userStats.map(user => {
              const proficiency = getProficiencyLevel(user.averageWpm);
              return (
                <div key={user.id} className="table-row">
                  <span className="user-info">
                    <strong>{user.fullName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</strong>
                    <small>{user.email || ''}</small>
                  </span>
                  <span className="wpm">{user.averageWpm} –∑–Ω/–º–∏–Ω</span>
                  <span className="accuracy">{user.averageAccuracy}%</span>
                  <span className="tests-count">{user.testsCount}</span>
                  <span 
                    className="proficiency-level"
                    style={{ color: proficiency.color }}
                  >
                    {proficiency.level}
                  </span>
                  <span className="actions">
                    <button 
                      onClick={() => fetchUserHistory(user.id)}
                      className="view-history-btn"
                    >
                      –ò—Å—Ç–æ—Ä–∏—è
                    </button>
                  </span>
                </div>
              );
            })}
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º */}
        <div className="groups-stats">
          <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º</h3>
          <div className="groups-grid">
            {groupStats.map(group => (
              <div key={group.id} className="group-card">
                <h4>{group.name}</h4>
                <div className="group-metrics">
                  <div className="metric">
                    <span className="metric-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
                    <span className="metric-value">{group.membersCount}</span>
                  </div>
                  <div className="metric">
                    <span className="metric-label">–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:</span>
                    <span className="metric-value">{group.averageWpm} –∑–Ω/–º–∏–Ω</span>
                  </div>
                  <div className="metric">
                    <span className="metric-label">–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span className="metric-value">{group.averageAccuracy}%</span>
                  </div>
                  <div className="metric">
                    <span className="metric-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</span>
                    <span className="metric-value">{group.totalTests}</span>
                  </div>
                </div>
                <div className="group-progress">
                  <div className="progress-bar">
                    <div 
                      className="progress-fill"
                      style={{ width: `${Math.min(group.averageWpm / 60 * 100, 100)}%` }}
                    ></div>
                  </div>
                  <small>–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º—É —É—Ä–æ–≤–Ω—é (60 –∑–Ω/–º–∏–Ω)</small>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {selectedUser && (
        <div className="modal-overlay" onClick={() => setSelectedUser(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
              <button 
                className="close-btn"
                onClick={() => setSelectedUser(null)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="history-chart">
                <h4>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏</h4>
                <div className="chart-container">
                  {userHistory.length > 0 ? (
                    <div className="simple-chart">
                      {userHistory.slice(-10).map((result, index) => (
                        <div key={index} className="chart-bar">
                          <div 
                            className="bar"
                            style={{ 
                              height: `${(result.wpm / 80) * 100}%`,
                              backgroundColor: result.accuracy >= 95 ? '#4CAF50' : result.accuracy >= 90 ? '#2196F3' : '#FF9800'
                            }}
                          ></div>
                          <span className="bar-label">{result.wpm}</span>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                  )}
                </div>
              </div>
              <div className="history-table">
                <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>
                <div className="table-header">
                  <span>–î–∞—Ç–∞</span>
                  <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
                  <span>–¢–æ—á–Ω–æ—Å—Ç—å</span>
                  <span>–í—Ä–µ–º—è</span>
                  <span>–û—à–∏–±–∫–∏</span>
                </div>
                {userHistory.slice(0, 10).map((result, index) => (
                  <div key={index} className="table-row">
                    <span>{new Date(result.created_at).toLocaleDateString()}</span>
                    <span>{result.wpm} –∑–Ω/–º–∏–Ω</span>
                    <span>{parseFloat(result.accuracy).toFixed(2)}%</span>
                    <span>{formatDuration(result.time_seconds)}</span>
                    <span>{result.errors || 0}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TypingManagement;