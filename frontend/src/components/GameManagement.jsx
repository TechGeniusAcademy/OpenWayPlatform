import { useState, useEffect } from 'react';
import api, { BASE_URL } from '../utils/api';
import GameCards from './GameCards';
import GameQuestions from './GameQuestions';
import './GameManagement.css';

function GameManagement() {
  const [activeTab, setActiveTab] = useState('sessions'); // 'sessions', 'cards', 'questions'
  const [sessions, setSessions] = useState([]);
  const [groups, setGroups] = useState([]);
  const [selectedGroup, setSelectedGroup] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showPlayersModal, setShowPlayersModal] = useState(false);
  const [showGameModal, setShowGameModal] = useState(false);
  const [currentSession, setCurrentSession] = useState(null);
  const [groupStudents, setGroupStudents] = useState([]);
  const [selectedPlayers, setSelectedPlayers] = useState([]);
  const [currentRound, setCurrentRound] = useState(null);
  const [drawnCard, setDrawnCard] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [showCardAnimation, setShowCardAnimation] = useState(false);
  const [allCards, setAllCards] = useState([]);
  const [scrollingCards, setScrollingCards] = useState([]);
  const [extraQuestionsCount, setExtraQuestionsCount] = useState(0); // –°—á–µ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const [notification, setNotification] = useState({ show: false, title: '', message: '', type: 'info' }); // –ú–æ–¥–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

  useEffect(() => {
    fetchSessions();
    fetchGroups();
    fetchAllCards();
  }, []);

  const fetchAllCards = async () => {
    try {
      const response = await api.get('/game/cards');
      setAllCards(response.data.cards || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    }
  };

  const showNotification = (title, message, type = 'info') => {
    setNotification({ show: true, title, message, type });
  };

  const closeNotification = () => {
    setNotification({ show: false, title: '', message: '', type: 'info' });
  };

  const fetchSessions = async () => {
    try {
      const response = await api.get('/game/sessions');
      setSessions(response.data.sessions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', error);
    }
  };

  const fetchGroups = async () => {
    try {
      const response = await api.get('/groups');
      setGroups(response.data.groups);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
    }
  };

  const openCreateModal = async (group) => {
    setSelectedGroup(group);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
    try {
      const response = await api.get(`/groups/${group.id}`);
      console.log('–û—Ç–≤–µ—Ç API –≥—Ä—É–ø–ø—ã:', response.data);
      setGroupStudents(response.data.group.students || []);
      setShowCreateModal(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    }
  };

  const createSession = async () => {
    if (!selectedGroup) return;
    
    try {
      const response = await api.post('/game/sessions', {
        groupId: selectedGroup.id,
        totalRounds: 10
      });
      
      const session = response.data.session;
      setCurrentSession(session);
      setShowCreateModal(false);
      setShowPlayersModal(true);
      fetchSessions();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  };

  const togglePlayerSelection = (userId) => {
    setSelectedPlayers(prev => 
      prev.includes(userId) 
        ? prev.filter(id => id !== userId)
        : [...prev, userId]
    );
  };

  const assignTeams = async () => {
    if (selectedPlayers.length < 2) {
      showNotification('‚ö†Ô∏è –û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!', 'warning');
      return;
    }

    try {
      await api.post(`/game/sessions/${currentSession.id}/assign-teams`, {
        userIds: selectedPlayers
      });
      
      showNotification('‚úÖ –£—Å–ø–µ—à–Ω–æ', '–ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
      setShowPlayersModal(false);
      fetchSessionDetails(currentSession.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', 'error');
    }
  };

  const fetchSessionDetails = async (sessionId) => {
    try {
      const response = await api.get(`/game/sessions/${sessionId}`);
      setCurrentSession(response.data.session);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  };

  const startGame = async (sessionId) => {
    try {
      await api.post(`/game/sessions/${sessionId}/start`);
      fetchSessionDetails(sessionId);
      openGameControl(sessionId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã:', error);
    }
  };

  const openGameControl = async (sessionId) => {
    await fetchSessionDetails(sessionId);
    setShowGameModal(true);
    checkCurrentRound(sessionId);
  };

  const checkCurrentRound = async (sessionId) => {
    try {
      const response = await api.get(`/game/sessions/${sessionId}/current-round`);
      setCurrentRound(response.data.round);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
    }
  };

  const drawCard = async () => {
    if (!currentSession) return;
    
    try {
      const response = await api.get(`/game/sessions/${currentSession.id}/draw-card`);
      const { card, question } = response.data;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–∞
      if (!question) {
        showNotification('‚ö†Ô∏è –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–æ–ø—Ä–æ—Å—ã".', 'warning');
        return;
      }
      
      setShowCardAnimation(true);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (—Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞ —Å—Ç–∏–ª—å)
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ 3 —Ä–∞–∑–∞ + –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ –∫–æ–Ω–µ—Ü
      const shuffled = [...allCards].sort(() => Math.random() - 0.5);
      const reelCards = [...shuffled, ...shuffled, ...shuffled, card];
      
      setScrollingCards(reelCards);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å CSS
      setTimeout(() => {
        const container = document.querySelector('.slot-reel');
        if (container) {
          // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞)
          const cardHeight = 380; // –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ + gap
          const finalPosition = -(reelCards.length - 1) * cardHeight;
          
          container.style.setProperty('--final-position', `${finalPosition}px`);
          container.classList.add('spinning');
          
          // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          setTimeout(() => {
            setDrawnCard(card);
            setCurrentQuestion(question);
            setShowCardAnimation(false);
            setScrollingCards([]);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            createRound(card, question);
          }, 4000); // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
        }
      }, 100);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      setShowCardAnimation(false);
      setScrollingCards([]);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', 'error');
    }
  };

  const createRound = async (card, question) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–∞
      if (!question) {
        showNotification('‚ö†Ô∏è –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.', 'error');
        return;
      }

      // roundNumber –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      const response = await api.post(`/game/sessions/${currentSession.id}/rounds`, {
        team: currentSession.current_team,
        cardId: card.id,
        questionId: question.id,
        question: question.question,
        timeLimit: card.card_type === 'time_bonus' ? 90 : 
                   card.card_type === 'minus_time' ? 45 : 60
      });
      
      setCurrentRound(response.data.round);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—É–Ω–¥', 'error');
    }
  };

  const answerCorrect = async () => {
    if (!currentRound) return;
    
    let points = 10;
    let notificationMessage = '';
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    if (drawnCard?.card_type === 'double_points') {
      points = 20;
      notificationMessage = 'üéâ –î–≤–æ–π–Ω—ã–µ –æ—á–∫–∏! +20 –±–∞–ª–ª–æ–≤';
    } else if (drawnCard?.card_type === 'steal_points') {
      points = 10;
      notificationMessage = 'üî• –ö—Ä–∞–∂–∞ –æ—á–∫–æ–≤! +10 –±–∞–ª–ª–æ–≤ –≤–∞–º, -5 –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É';
      // –û—Ç–Ω–∏–º–∞–µ–º —É –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
      const otherTeam = currentSession.current_team === 'team_a' ? 'team_b' : 'team_a';
      await api.post(`/game/sessions/${currentSession.id}/rounds`, {
        team: otherTeam,
        points: -5
      });
    } else if (drawnCard?.card_type === 'time_bonus') {
      points = 10;
      notificationMessage = '‚è∞ –ë–æ–Ω—É—Å –≤—Ä–µ–º–µ–Ω–∏! +10 –±–∞–ª–ª–æ–≤ –∏ +30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å';
    } else if (drawnCard?.card_type === 'minus_time') {
      points = 10;
      notificationMessage = '‚è±Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª–ª–æ–≤, –Ω–æ -15 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å';
    } else if (drawnCard?.card_type === 'skip_turn') {
      points = 0;
      notificationMessage = '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞! –•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω, –±–∞–ª–ª–æ–≤ –Ω–µ—Ç';
    } else if (drawnCard?.card_type === 'transfer_question') {
      points = 10;
      notificationMessage = 'üîÑ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª–ª–æ–≤ (–≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω)';
    } else if (drawnCard?.card_type === 'extra_questions') {
      points = 10;
      notificationMessage = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! +10 –±–∞–ª–ª–æ–≤';
    } else {
      notificationMessage = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! +10 –±–∞–ª–ª–æ–≤';
    }
    
    if (notificationMessage) {
      showNotification('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!', notificationMessage, 'success');
    }
    
    try {
      await api.post(`/game/rounds/${currentRound.id}/answer-correct`, {
        answer: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º)',
        points
      });
      
      await handleNextRound();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç', 'error');
    }
  };

  const answerWrong = async () => {
    if (!currentRound) return;
    
    showNotification('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π! -5 –±–∞–ª–ª–æ–≤', 'error');
    
    try {
      await api.post(`/game/rounds/${currentRound.id}/answer-wrong`, {
        answer: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
        points: -5
      });
      
      await handleNextRound();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç', 'error');
    }
  };

  const handleNextRound = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (drawnCard?.card_type === 'extra_questions' && extraQuestionsCount === 0) {
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      setExtraQuestionsCount(3);
      showNotification('ÔøΩ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!', '–ö–æ–º–∞–Ω–¥–µ –≤—ã–ø–∞–ª–æ 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥!', 'success');
    }
    
    setDrawnCard(null);
    setCurrentQuestion(null);
    setCurrentRound(null);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (extraQuestionsCount > 0) {
      setExtraQuestionsCount(extraQuestionsCount - 1);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ö–æ–¥–∞
      await fetchSessionDetails(currentSession.id);
      
      if (extraQuestionsCount === 1) {
        showNotification('‚úÖ –ë–æ–Ω—É—Å –∑–∞–∫–æ–Ω—á–µ–Ω', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.', 'info');
        // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
        await api.post(`/game/sessions/${currentSession.id}/next-turn`);
        await fetchSessionDetails(currentSession.id);
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–¥–∞
      await api.post(`/game/sessions/${currentSession.id}/next-turn`);
      await fetchSessionDetails(currentSession.id);
    }
    
    // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ
  };

  const finishGame = async () => {
    if (!confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?')) return;
    
    try {
      const response = await api.post(`/game/sessions/${currentSession.id}/finish`);
      
      const winnerText = response.data.winner === 'team_a' ? '–ê –ö–æ–º–∞–Ω–¥–∞' : 
                        response.data.winner === 'team_b' ? '–ë –ö–æ–º–∞–Ω–¥–∞' : 
                        'ü§ù –ù–∏—á—å—è';
      
      showNotification('üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerText}`, 'success');
      
      setTimeout(() => {
        setShowGameModal(false);
        setCurrentSession(null);
        fetchSessions();
      }, 2000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
      showNotification('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'error');
    }
  };

  const deleteSession = async (id) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?')) return;
    
    try {
      await api.delete(`/game/sessions/${id}`);
      fetchSessions();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  };

  return (
    <div className="game-management">
      <div className="tabs">
        <button 
          className={activeTab === 'sessions' ? 'active' : ''} 
          onClick={() => setActiveTab('sessions')}
        >
             –ò–≥—Ä—ã
        </button>
        <button 
          className={activeTab === 'cards' ? 'active' : ''} 
          onClick={() => setActiveTab('cards')}
        >
           –ö–∞—Ä—Ç–æ—á–∫–∏
        </button>
        <button 
          className={activeTab === 'questions' ? 'active' : ''} 
          onClick={() => setActiveTab('questions')}
        >
          ‚ùì –í–æ–ø—Ä–æ—Å—ã
        </button>
      </div>

      {activeTab === 'sessions' && (
        <div className="sessions-tab">
          <h2>   –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏</h2>

          <h3 style={{ marginTop: '30px', marginBottom: '20px', color: '#2c3e50', fontSize: '24px' }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:
          </h3>
          <div className="groups-grid">
            {groups.map(group => (
              <div key={group.id} className="group-card">
                <h4>{group.name}</h4>
                <p>üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {group.member_count || 0}</p>
                <button 
                  className="btn-primary" 
                  onClick={() => openCreateModal(group)}
                >
                  –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                </button>
              </div>
            ))}
          </div>

          <h3 style={{ marginTop: '40px', marginBottom: '20px', color: '#2c3e50', fontSize: '24px' }}>
            –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã:
          </h3>
          <div className="sessions-list">
            <table>
              <thead>
                <tr>
                  <th>–ì—Ä—É–ø–ø–∞</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–°—á–µ—Ç</th>
                  <th>–ò–≥—Ä–æ–∫–æ–≤</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {sessions.map(session => (
                  <tr key={session.id}>
                    <td>{session.group_name}</td>
                    <td>
                      <span className={`status-badge ${session.status}`}>
                        {session.status === 'preparing' ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞' :
                         session.status === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
                      </span>
                    </td>
                    <td>
                      <span className="score">
                        –ê {session.team_a_score} : {session.team_b_score} –ë
                      </span>
                    </td>
                    <td>{session.player_count}</td>
                    <td className="actions">
                      {session.status === 'preparing' && (
                        <button 
                          onClick={() => startGame(session.id)}
                          className="btn-success"
                        >
                          ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
                        </button>
                      )}
                      {session.status === 'in_progress' && (
                        <button 
                          onClick={() => openGameControl(session.id)}
                          className="btn-primary"
                        >
                             –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        </button>
                      )}
                      <button 
                        onClick={() => deleteSession(session.id)}
                        className="btn-delete"
                      >
                        üóëÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {activeTab === 'cards' && <GameCards />}
      {activeTab === 'questions' && <GameQuestions />}

      {/* Create Session Modal */}
      {showCreateModal && (
        <div className="modal-overlay" onClick={() => setShowCreateModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h3>–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã: {selectedGroup?.name}</h3>
            <p>–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {groupStudents.length}</p>
            
            <div className="form-actions">
              <button onClick={() => setShowCreateModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button className="btn-primary" onClick={createSession}>
                –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Players Selection Modal */}
      {showPlayersModal && (
        <div className="modal-overlay" onClick={() => setShowPlayersModal(false)}>
          <div className="modal-content large" onClick={(e) => e.stopPropagation()}>
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤</h3>
            <p>–í—ã–±—Ä–∞–Ω–æ: {selectedPlayers.length} –∏–≥—Ä–æ–∫–æ–≤</p>
            
            <div className="players-list">
              {groupStudents.map(student => (
                <div 
                  key={student.id} 
                  className={`player-item ${selectedPlayers.includes(student.id) ? 'selected' : ''}`}
                  onClick={() => togglePlayerSelection(student.id)}
                >
                  <span>{student.full_name || student.username}</span>
                  {selectedPlayers.includes(student.id) && <span className="checkmark">‚úì</span>}
                </div>
              ))}
            </div>
            
            <div className="form-actions">
              <button onClick={() => setShowPlayersModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button 
                className="btn-primary" 
                onClick={assignTeams}
                disabled={selectedPlayers.length < 2}
              >
                –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã ({selectedPlayers.length} –∏–≥—Ä–æ–∫–æ–≤)
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Game Control Modal */}
      {showGameModal && currentSession && (
        <div className="modal-overlay game-control-modal">
          <div className="modal-content extra-large" onClick={(e) => e.stopPropagation()}>
            <button className="close-btn" onClick={() => setShowGameModal(false)}>‚úï</button>
            
            <div className="game-header">
              <h2>   –ò–≥—Ä–∞: {currentSession.group_name}</h2>
              <div className="game-info">
                <span className="score-display">
                  –ê –ö–æ–º–∞–Ω–¥–∞: {currentSession.team_a_score} | –ö–æ–º–∞–Ω–¥–∞: {currentSession.team_b_score} –ë
                </span>
              </div>
            </div>

            <div className="current-team-display">
              <h3>
                –•–æ–¥: {currentSession.current_team === 'team_a' ? '–ê –ö–æ–º–∞–Ω–¥–∞' : '–ë –ö–æ–º–∞–Ω–¥–∞'}
                {extraQuestionsCount > 0 && (
                  <span className="extra-questions-badge">
                    üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {extraQuestionsCount}
                  </span>
                )}
              </h3>
            </div>

            {showCardAnimation && scrollingCards.length > 0 && (
              <div className="slot-machine-overlay">
                <div className="slot-machine-container">
                  <div className="slot-window">
                    <div className="slot-reel">
                      {scrollingCards.map((card, index) => (
                        <div 
                          key={`${card.id}-${index}`} 
                          className="slot-card"
                        >
                          <div className="card-inner">
                            {card.image_url ? (
                              <img src={`${BASE_URL}${card.image_url}`} alt={card.name} />
                            ) : (
                              <div className="card-placeholder">üé¥</div>
                            )}
                            <div className="card-name">{card.name}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  <div className="slot-indicator-line"></div>
                  <p className="slot-text">–ö–†–£–¢–ò–ú</p>
                </div>
              </div>
            )}

            {!currentRound && !drawnCard && !showCardAnimation && (
              <div className="round-actions">
                <button className="btn-large btn-primary" onClick={drawCard}>
                   –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                </button>
              </div>
            )}

            {drawnCard && (
              <div className="drawn-card-display">
                <div className={`card-large ${drawnCard.team}`}>
                  {drawnCard.image_url ? (
                    <img src={`${BASE_URL}${drawnCard.image_url}`} alt={drawnCard.name} />
                  ) : (
                    <div className="card-placeholder">üé¥</div>
                  )}
                  <h3>{drawnCard.name}</h3>
                  <p>{drawnCard.description}</p>
                  <div className="card-effect">
                    –≠—Ñ—Ñ–µ–∫—Ç: {drawnCard.effect_value > 0 ? '+' : ''}{drawnCard.effect_value}
                  </div>
                </div>
              </div>
            )}

            {currentQuestion && (
              <div className="question-display">
                <h3>‚ùì –í–æ–ø—Ä–æ—Å:</h3>
                <p className="question-text">{currentQuestion.question}</p>
                
                <div className="answer-controls">
                  <button className="btn-success" onClick={answerCorrect}>
                    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                  </button>
                  <button className="btn-danger" onClick={answerWrong}>
                    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                  </button>
                </div>
              </div>
            )}

            <div className="game-controls">
              <button className="btn-danger" onClick={finishGame}>
                 –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
              </button>
            </div>

            {/* Teams Display */}
            <div className="teams-display">
              <div className="team team-a">
                <h4>–ê –ö–æ–º–∞–Ω–¥–∞</h4>
                <ul>
                  {currentSession.participants
                    ?.filter(p => p.team === 'team_a')
                    .map(p => (
                      <li key={p.id}>
                        {p.full_name || p.username}
                      </li>
                    ))}
                </ul>
              </div>
              
              <div className="team team-b">
                <h4>–ë –ö–æ–º–∞–Ω–¥–∞</h4>
                <ul>
                  {currentSession.participants
                    ?.filter(p => p.team === 'team_b')
                    .map(p => (
                      <li key={p.id}>
                        {p.full_name || p.username}
                      </li>
                    ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Notification Modal */}
      {notification.show && (
        <div className="notification-overlay" onClick={closeNotification}>
          <div className={`notification-modal ${notification.type}`} onClick={(e) => e.stopPropagation()}>
            <button className="notification-close" onClick={closeNotification}>‚úï</button>
            <div className="notification-header">
              <h3>{notification.title}</h3>
            </div>
            <div className="notification-body">
              <p>{notification.message}</p>
            </div>
            <div className="notification-footer">
              <button className="btn-primary" onClick={closeNotification}>OK</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default GameManagement;
