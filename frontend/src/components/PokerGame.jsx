import { useState, useEffect } from 'react';
import './PokerGame.css';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–¥–æ–π
const range = (start, count) =>
  Array.apply(0, Array(count)).map((element, index) => index + start);

function shuffle(array) {
  const copy = [];
  let n = array.length;
  let i;
  while (n) {
    i = Math.floor(Math.random() * array.length);
    if (i in array) {
      copy.push(array[i]);
      delete array[i];
      n--;
    }
  }
  return copy;
}

const suits = ['‚ô¶', '‚ô£', '‚ô•', '‚ô†']; // diamonds, clubs, hearts, spades
const suitCodes = ['d', 'c', 'h', 's'];
const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

const getDeck = () =>
  shuffle(
    ranks
      .map(r => suitCodes.map(s => r + s))
      .reduce((prev, curr) => prev.concat(curr))
  );

const SUIT_NAMES = {
  d: '‚ô¶ –ë—É–±–Ω—ã',
  c: '‚ô£ –¢—Ä–µ—Ñ—ã',
  h: '‚ô• –ß–µ—Ä–≤–∏',
  s: '‚ô† –ü–∏–∫–∏'
};

const SUIT_SYMBOLS = {
  d: '‚ô¶',
  c: '‚ô£',
  h: '‚ô•',
  s: '‚ô†'
};

const SUIT_COLORS = {
  d: 'red',
  c: 'black',
  h: 'red',
  s: 'black'
};

const RANK_NAMES = {
  A: '–¢—É–∑',
  2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10',
  J: '–í–∞–ª–µ—Ç',
  Q: '–î–∞–º–∞',
  K: '–ö–æ—Ä–æ–ª—å'
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã
const PlayingCard = ({ card, size = 120 }) => {
  if (!card || card.length < 2) return null;
  
  const rank = card.slice(0, -1);
  const suitCode = card.slice(-1);
  const suit = SUIT_SYMBOLS[suitCode];
  const color = SUIT_COLORS[suitCode];
  
  return (
    <div className="playing-card" style={{ width: `${size}px`, height: `${size * 1.4}px` }}>
      <div className="card-inner">
        <div className="card-corner top-left" style={{ color }}>
          <div className="card-rank">{rank}</div>
          <div className="card-suit">{suit}</div>
        </div>
        <div className="card-center" style={{ color }}>
          <span className="card-suit-large">{suit}</span>
        </div>
        <div className="card-corner bottom-right" style={{ color }}>
          <div className="card-rank">{rank}</div>
          <div className="card-suit">{suit}</div>
        </div>
      </div>
    </div>
  );
};

export default function PokerGame() {
  const [deck, setDeck] = useState(getDeck());
  const [board, setBoard] = useState([]);
  const [playerHand, setPlayerHand] = useState([]);
  const [gameState, setGameState] = useState('ready'); // ready, flop, turn, river
  const [message, setMessage] = useState('–ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');

  const newRound = () => {
    const newDeck = getDeck();
    setDeck(newDeck);
    setBoard([]);
    setPlayerHand([]);
    setGameState('ready');
    setMessage('–ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã" –¥–ª—è –Ω–∞—á–∞–ª–∞');
  };

  const dealPlayerCards = () => {
    if (gameState !== 'ready') return;
    
    const newDeck = [...deck];
    const cards = [newDeck.pop(), newDeck.pop()];
    setPlayerHand(cards);
    setDeck(newDeck);
    setGameState('preflop');
    setMessage('–í–∞—à–∏ –∫–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–§–ª–æ–ø" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
  };

  const dealFlop = () => {
    if (gameState !== 'preflop') return;
    
    const newDeck = [...deck];
    const flop = [newDeck.pop(), newDeck.pop(), newDeck.pop()];
    setBoard(flop);
    setDeck(newDeck);
    setGameState('flop');
    setMessage('–§–ª–æ–ø —Ä–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Ä–Ω" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã');
  };

  const dealTurn = () => {
    if (gameState !== 'flop') return;
    
    const newDeck = [...deck];
    const card = newDeck.pop();
    setBoard([...board, card]);
    setDeck(newDeck);
    setGameState('turn');
    setMessage('–¢–µ—Ä–Ω –æ—Ç–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ "–†–∏–≤–µ—Ä" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã');
  };

  const dealRiver = () => {
    if (gameState !== 'turn') return;
    
    const newDeck = [...deck];
    const card = newDeck.pop();
    setBoard([...board, card]);
    setDeck(newDeck);
    setGameState('river');
    setMessage('–†–∏–≤–µ—Ä –æ—Ç–∫—Ä—ã—Ç! –í—Å–µ –∫–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É.');
  };

  const getCardName = (card) => {
    if (!card || card.length < 2) return '';
    const rank = card.slice(0, -1);
    const suit = card.slice(-1);
    return `${RANK_NAMES[rank] || rank} ${SUIT_NAMES[suit] || ''}`;
  };

  return (
    <div className="poker-game-fullscreen">
      <div className="poker-game-container">
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª */}
        <div className="poker-table-area">
          <div className="poker-table">
            <h2 className="poker-title">‚ô† –¢–µ—Ö–∞—Å—Å–∫–∏–π –•–æ–ª–¥–µ–º ‚ô•</h2>
            
            {/* –°—Ç–æ–ª (Board) */}
            <div className="board-area">
              <h3>–°—Ç–æ–ª ({board.length}/5 –∫–∞—Ä—Ç)</h3>
              <div className="cards-container">
                {board.length > 0 ? (
                  board.map((card, idx) => (
                    <PlayingCard key={idx} card={card} size={140} />
                  ))
                ) : (
                  <div className="empty-board">–ö–∞—Ä—Ç—ã –Ω–µ —Ä–æ–∑–¥–∞–Ω—ã</div>
                )}
              </div>
            </div>

            {/* –†—É–∫–∞ –∏–≥—Ä–æ–∫–∞ */}
            <div className="player-hand-area">
              <h3>–í–∞—à–∏ –∫–∞—Ä—Ç—ã ({playerHand.length}/2)</h3>
              <div className="player-cards">
                {playerHand.length > 0 ? (
                  playerHand.map((card, idx) => (
                    <PlayingCard key={idx} card={card} size={120} />
                  ))
                ) : (
                  <div className="empty-cards">–ö–∞—Ä—Ç—ã –Ω–µ —Ä–æ–∑–¥–∞–Ω—ã</div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–æ–Ω—Ç—Ä–æ–ª—å */}
        <div className="poker-controls">
          <div className="controls-content">
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π</h3>
            
            <div className="game-status">
              <div className="status-badge" data-state={gameState}>
                {gameState === 'ready' && '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}
                {gameState === 'preflop' && 'üé¥ –ü—Ä–µ—Ñ–ª–æ–ø'}
                {gameState === 'flop' && 'üÉè –§–ª–æ–ø'}
                {gameState === 'turn' && 'üéØ –¢–µ—Ä–Ω'}
                {gameState === 'river' && 'üèÅ –†–∏–≤–µ—Ä'}
              </div>
              <p className="status-message">{message}</p>
            </div>

            <div className="control-buttons">
              <button 
                className="btn btn-primary"
                onClick={newRound}
              >
                üîÑ –ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞
              </button>

              <button 
                className="btn btn-deal"
                onClick={dealPlayerCards}
                disabled={gameState !== 'ready'}
              >
                üé¥ –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã
              </button>

              <button 
                className="btn btn-action"
                onClick={dealFlop}
                disabled={gameState !== 'preflop'}
              >
                ‚û°Ô∏è –§–ª–æ–ø (3 –∫–∞—Ä—Ç—ã)
              </button>

              <button 
                className="btn btn-action"
                onClick={dealTurn}
                disabled={gameState !== 'flop'}
              >
                ‚û°Ô∏è –¢–µ—Ä–Ω (1 –∫–∞—Ä—Ç–∞)
              </button>

              <button 
                className="btn btn-action"
                onClick={dealRiver}
                disabled={gameState !== 'turn'}
              >
                ‚û°Ô∏è –†–∏–≤–µ—Ä (1 –∫–∞—Ä—Ç–∞)
              </button>
            </div>

            <div className="cards-info">
              <h4>–ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:</h4>
              {board.length > 0 ? (
                <ul className="card-list">
                  {board.map((card, idx) => (
                    <li key={idx} className="card-item">
                      {getCardName(card)}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="no-cards">–°—Ç–æ–ª –ø—É—Å—Ç</p>
              )}

              <h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>
              {playerHand.length > 0 ? (
                <ul className="card-list">
                  {playerHand.map((card, idx) => (
                    <li key={idx} className="card-item">
                      {getCardName(card)}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="no-cards">–ö–∞—Ä—Ç—ã –Ω–µ —Ä–æ–∑–¥–∞–Ω—ã</p>
              )}
            </div>

            <div className="game-info">
              <h4>üìã –ü—Ä–∞–≤–∏–ª–∞</h4>
              <ul className="rules-list">
                <li>1. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É</li>
                <li>2. –ü–æ–ª—É—á–∏—Ç–µ 2 –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É</li>
                <li>3. –§–ª–æ–ø - 3 –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª</li>
                <li>4. –¢–µ—Ä–Ω - –µ—â–µ 1 –∫–∞—Ä—Ç–∞</li>
                <li>5. –†–∏–≤–µ—Ä - –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞</li>
              </ul>
            </div>

            <div className="deck-info">
              <p>üì¶ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: <strong>{deck.length}</strong></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
