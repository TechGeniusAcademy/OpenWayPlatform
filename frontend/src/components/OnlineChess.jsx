import React, { useState, useEffect } from 'react';
import { Chessboard } from 'react-chessboard';
import { Chess } from 'chess.js';
import { useWebSocket } from '../context/WebSocketContext';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';
import { toast } from 'react-toastify';
import api, { BASE_URL } from '../utils/api';
import '../styles/UsernameStyles.css';
import './OnlineChess.css';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const OnlineChess = () => {
  const { getSocket } = useWebSocket();
  const { user } = useAuth();
  const socket = getSocket();
  const [view, setView] = useState('menu'); // menu, challenge, game
  const [availablePlayers, setAvailablePlayers] = useState([]);
  const [myGames, setMyGames] = useState([]);
  const [currentGame, setCurrentGame] = useState(null);
  const [game, setGame] = useState(new Chess());
  const [playerColor, setPlayerColor] = useState('white');
  const [moveHistory, setMoveHistory] = useState([]);
  const [gameStatus, setGameStatus] = useState('');
  const [selectedColor, setSelectedColor] = useState('white');
  const [betAmount, setBetAmount] = useState(100);
  const [myTimeLeft, setMyTimeLeft] = useState(300); // –ú–æ—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
  const [opponentTimeLeft, setOpponentTimeLeft] = useState(300);
  const [myTurnStartTime, setMyTurnStartTime] = useState(null); // –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª—Å—è –º–æ–π —Ö–æ–¥
  const [displayTime, setDisplayTime] = useState(300); // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [cosmetics, setCosmetics] = useState({ frames: [], banners: [] });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ AuthContext
  const currentUserId = user?.id;

  useEffect(() => {
    console.log('üìã –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ AuthContext:', user);
    console.log('üìã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId);
  }, [user, currentUserId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏
  useEffect(() => {
    loadCosmetics();
  }, []);

  const loadCosmetics = async () => {
    try {
      const [framesRes, bannersRes] = await Promise.all([
        api.get('/shop/items?type=frame'),
        api.get('/shop/items?type=banner')
      ]);
      setCosmetics({
        frames: framesRes.data.items,
        banners: bannersRes.data.items
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏:', error);
    }
  };

  const getFrameImage = (frameKey) => {
    if (!frameKey || frameKey === 'none') return null;
    const frame = cosmetics.frames.find(f => f.item_key === frameKey);
    return frame?.image_url ? `${BASE_URL}${frame.image_url}` : null;
  };

  const getBannerImage = (bannerKey) => {
    if (!bannerKey || bannerKey === 'default') return null;
    const banner = cosmetics.banners.find(b => b.item_key === bannerKey);
    return banner?.image_url ? `${BASE_URL}${banner.image_url}` : null;
  };

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    if (view !== 'game' || !currentGame || currentGame.status !== 'active') {
      return;
    }

    const isMyTurn = (game.turn() === 'w' && playerColor === 'white') || 
                     (game.turn() === 'b' && playerColor === 'black');

    if (!isMyTurn) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à —Ö–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setDisplayTime(myTimeLeft);
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—à —Ö–æ–¥, –Ω–æ —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º
    if (!myTurnStartTime) {
      console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ —Ö–æ–¥–∞');
      setMyTurnStartTime(Date.now());
      setDisplayTime(myTimeLeft);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–µ 100–º—Å
    const interval = setInterval(() => {
      const elapsed = Math.floor((Date.now() - myTurnStartTime) / 1000);
      const remaining = Math.max(0, myTimeLeft - elapsed);
      setDisplayTime(remaining);
      
      if (remaining <= 0) {
        clearInterval(interval);
        toast.error('‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!');
      }
    }, 100);

    return () => clearInterval(interval);
  }, [view, currentGame, game.fen(), playerColor, myTurnStartTime, myTimeLeft]);

  useEffect(() => {
    loadAvailablePlayers();
    loadMyGames();

    if (socket) {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –Ω–∞ –∏–≥—Ä—É
      socket.on('chess-challenge-received', handleChallengeReceived);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–æ–º –≤—ã–∑–æ–≤–µ
      socket.on('chess-challenge-accepted-notification', handleChallengeAccepted);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–º –≤—ã–∑–æ–≤–µ
      socket.on('chess-challenge-declined-notification', handleChallengeDeclined);
      
      // –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      socket.on('chess-move-made', handleOpponentMove);
      
      // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      socket.on('chess-game-finished', handleGameFinished);

      return () => {
        socket.off('chess-challenge-received', handleChallengeReceived);
        socket.off('chess-challenge-accepted-notification', handleChallengeAccepted);
        socket.off('chess-challenge-declined-notification', handleChallengeDeclined);
        socket.off('chess-move-made', handleOpponentMove);
        socket.off('chess-game-finished', handleGameFinished);
      };
    }
  }, [socket]);

  const loadAvailablePlayers = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/chess/available-players`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setAvailablePlayers(response.data.players);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
    }
  };

  const loadMyGames = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/chess/my-games`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setMyGames(response.data.games);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
    }
  };

  const handleChallengeReceived = (data) => {
    const { gameId, challengerName } = data;
    
    console.log('üéØ –ü–æ–ª—É—á–µ–Ω –≤—ã–∑–æ–≤ –Ω–∞ —à–∞—Ö–º–∞—Ç—ã:', data);
    
    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
    loadMyGames();
    
    toast.info(`${challengerName} –±—Ä–æ—Å–∏–ª –≤–∞–º –≤—ã–∑–æ–≤ –Ω–∞ –ø–∞—Ä—Ç–∏—é –≤ —à–∞—Ö–º–∞—Ç—ã!`, {
      autoClose: 5000,
      onClick: () => {
        setView('menu');
      }
    });
  };

  const handleChallengeAccepted = (data) => {
    toast.success('–í–∞—à –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
    loadMyGames();
  };

  const handleChallengeDeclined = (data) => {
    toast.error('–í–∞—à –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω');
    loadMyGames();
  };

  const handleOpponentMove = (data) => {
    const { move, position, whiteTimeLeft, blackTimeLeft } = data;
    const newGame = new Chess(position);
    setGame(newGame);
    
    const history = newGame.history({ verbose: true });
    setMoveHistory(history);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    if (whiteTimeLeft !== undefined && blackTimeLeft !== undefined) {
      const isWhite = playerColor === 'white';
      const newMyTime = isWhite ? whiteTimeLeft : blackTimeLeft;
      const newOpponentTime = isWhite ? blackTimeLeft : whiteTimeLeft;
      
      console.log(`‚è±Ô∏è –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - –ú–æ—ë –≤—Ä–µ–º—è: ${newMyTime}s, –í—Ä–µ–º—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${newOpponentTime}s`);
      
      setMyTimeLeft(newMyTime);
      setOpponentTimeLeft(newOpponentTime);
      setDisplayTime(newMyTime);
      
      // –¢–µ–ø–µ—Ä—å –Ω–∞—à —Ö–æ–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      const isOurTurn = (newGame.turn() === 'w' && playerColor === 'white') || 
                        (newGame.turn() === 'b' && playerColor === 'black');
      
      if (isOurTurn) {
        console.log('‚è±Ô∏è –¢–µ–ø–µ—Ä—å –Ω–∞—à —Ö–æ–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–∏:', newMyTime);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setTimeout(() => {
          setMyTurnStartTime(Date.now());
        }, 0);
      } else {
        setMyTurnStartTime(null);
      }
    }
    
    updateGameStatus(newGame);
  };

  const handleGameFinished = (data) => {
    const { result, reason } = data;
    let message = '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ';
    if (result === 'white') message += '–ü–æ–±–µ–¥–∏–ª–∏ –±–µ–ª—ã–µ';
    else if (result === 'black') message += '–ü–æ–±–µ–¥–∏–ª–∏ —á—ë—Ä–Ω—ã–µ';
    else message += '–ù–∏—á—å—è';
    
    toast.info(`${message} (${reason})`);
    setView('menu');
    loadMyGames();
  };

  const sendChallenge = async (opponentId) => {
    try {
      console.log('üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É:', opponentId);
      console.log('üéØ –ú–æ–π ID:', currentUserId);
      
      if (opponentId === currentUserId) {
        toast.error('–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!');
        return;
      }

      if (betAmount < 0) {
        toast.error('–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!');
        return;
      }
      
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `${API_URL}/chess/challenge`,
        { opponentId, playerColor: selectedColor, betAmount },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const { game: newGame, challengerName } = response.data;
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∑–æ–≤–∞:', { opponentId, gameId: newGame.id, challengerName });
      console.log('üì§ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', newGame);
      
      if (socket) {
        socket.emit('chess-challenge-sent', {
          opponentId,
          gameId: newGame.id,
          challengerName
        });
      } else {
        console.error('‚ùå Socket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω!');
      }

      toast.success('–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      loadMyGames();
      setView('menu');
    } catch (error) {
      toast.error(error.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∑–æ–≤–∞');
    }
  };

  const acceptChallenge = async (gameId, challengerId) => {
    try {
      const token = localStorage.getItem('token');
      await axios.post(
        `${API_URL}/chess/accept/${gameId}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (socket) {
        socket.emit('chess-challenge-accepted', { gameId, challengerId });
      }

      toast.success('–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
      loadGame(gameId);
    } catch (error) {
      toast.error(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞');
    }
  };

  const declineChallenge = async (gameId, challengerId) => {
    try {
      const token = localStorage.getItem('token');
      await axios.post(
        `${API_URL}/chess/decline/${gameId}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (socket) {
        socket.emit('chess-challenge-declined', { gameId, challengerId });
      }

      toast.info('–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
      loadMyGames();
    } catch (error) {
      toast.error(error.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞');
    }
  };

  const loadGame = async (gameId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/chess/game/${gameId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const gameData = response.data.game;
      setCurrentGame(gameData);

      const isWhite = gameData.white_player_id === currentUserId;
      setPlayerColor(isWhite ? 'white' : 'black');

      const chessGame = new Chess(gameData.position);
      setGame(chessGame);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ move_history
      let history = [];
      if (gameData.move_history) {
        try {
          history = typeof gameData.move_history === 'string' 
            ? JSON.parse(gameData.move_history) 
            : gameData.move_history;
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤:', e);
          history = [];
        }
      }
      setMoveHistory(history);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å 300 —Å–µ–∫—É–Ω–¥)
      const myTime = isWhite ? gameData.white_time_left : gameData.black_time_left;
      const oppTime = isWhite ? gameData.black_time_left : gameData.white_time_left;
      
      setMyTimeLeft(myTime);
      setOpponentTimeLeft(oppTime);
      setDisplayTime(myTime);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
      const isMyTurn = (chessGame.turn() === 'w' && isWhite) || (chessGame.turn() === 'b' && !isWhite);
      if (isMyTurn) {
        setMyTurnStartTime(Date.now()); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω–∞—à —Ö–æ–¥
      } else {
        setMyTurnStartTime(null);
      }
      
      updateGameStatus(chessGame);

      if (socket) {
        socket.emit('join-chess-game', gameId);
      }

      setView('game');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
      console.error(error);
    }
  };

  const makeMove = (sourceSquare, targetSquare) => {
    try {
      const move = game.move({
        from: sourceSquare,
        to: targetSquare,
        promotion: 'q'
      });

      if (move === null) return false;

      const newGame = new Chess(game.fen());
      setGame(newGame);

      const history = newGame.history({ verbose: true });
      setMoveHistory(history);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —á–µ—Ä–µ–∑ WebSocket
      const token = localStorage.getItem('token');
      axios.post(
        `${API_URL}/chess/move/${currentGame.id}`,
        { move: move.san, position: newGame.fen() },
        { headers: { Authorization: `Bearer ${token}` } }
      ).then(response => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞
        const updatedGame = response.data.game;
        const isWhite = playerColor === 'white';
        const newMyTime = isWhite ? updatedGame.white_time_left : updatedGame.black_time_left;
        const newOpponentTime = isWhite ? updatedGame.black_time_left : updatedGame.white_time_left;
        
        console.log(`‚è±Ô∏è –ü–æ—Å–ª–µ —Ö–æ–¥–∞ - –ú–æ—ë –≤—Ä–µ–º—è: ${newMyTime}s, –í—Ä–µ–º—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${newOpponentTime}s`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setMyTimeLeft(newMyTime);
        setOpponentTimeLeft(newOpponentTime);
        setDisplayTime(newMyTime);
        setMyTurnStartTime(null); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à —Ç–∞–π–º–µ—Ä - —Ç–µ–ø–µ—Ä—å —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        
        console.log('‚è±Ô∏è –ù–∞—à —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∂–¥—ë–º —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞');
      }).catch(err => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ–¥–∞:', err);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response?.data);
        console.error('‚ùå –°—Ç–∞—Ç—É—Å:', err.response?.status);
        console.error('‚ùå –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', err.response);
        console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', err.response?.data?.error);
        
        if (err.response?.data?.timeout) {
          toast.error('‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.');
          setTimeout(() => {
            setView('menu');
            loadMyGames();
          }, 2000);
        } else if (err.response?.data?.error) {
          toast.error(`–û—à–∏–±–∫–∞: ${err.response.data.error}`);
        } else {
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞');
        }
      });

      if (socket) {
        socket.emit('chess-move', {
          gameId: currentGame.id,
          move: move.san,
          position: newGame.fen()
        });
      }

      updateGameStatus(newGame);
      return true;
    } catch (error) {
      return false;
    }
  };

  const updateGameStatus = (chessGame) => {
    if (chessGame.isCheckmate()) {
      const winner = chessGame.turn() === 'w' ? 'black' : 'white';
      setGameStatus(`–ú–∞—Ç! –ü–æ–±–µ–¥–∏–ª–∏ ${winner === 'white' ? '–±–µ–ª—ã–µ' : '—á—ë—Ä–Ω—ã–µ'}`);
      endGame(winner, 'checkmate');
    } else if (chessGame.isDraw()) {
      setGameStatus('–ù–∏—á—å—è!');
      endGame('draw', 'stalemate');
    } else if (chessGame.isStalemate()) {
      setGameStatus('–ü–∞—Ç!');
      endGame('draw', 'stalemate');
    } else if (chessGame.isCheck()) {
      setGameStatus('–®–∞—Ö!');
    } else {
      const turn = chessGame.turn() === 'w' ? '–±–µ–ª—ã—Ö' : '—á—ë—Ä–Ω—ã—Ö';
      setGameStatus(`–•–æ–¥ ${turn}`);
    }
  };

  const endGame = async (result, reason) => {
    try {
      const token = localStorage.getItem('token');
      await axios.post(
        `${API_URL}/chess/end/${currentGame.id}`,
        { result, reason },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (socket) {
        socket.emit('chess-game-ended', {
          gameId: currentGame.id,
          result,
          reason
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
    }
  };

  const resign = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è?')) {
      const winner = playerColor === 'white' ? 'black' : 'white';
      endGame(winner, 'resignation');
      toast.info('–í—ã —Å–¥–∞–ª–∏—Å—å');
      setView('menu');
      loadMyGames();
    }
  };

  const backToMenu = () => {
    if (socket && currentGame) {
      socket.emit('leave-chess-game', currentGame.id);
    }
    setView('menu');
  };

  const onDrop = (sourceSquare, targetSquare) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    const isMyTurn = 
      (game.turn() === 'w' && playerColor === 'white') ||
      (game.turn() === 'b' && playerColor === 'black');

    if (!isMyTurn) {
      toast.warning('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
      return false;
    }

    return makeMove(sourceSquare, targetSquare);
  };

  return (
    <div className="online-chess-container">
      {view === 'menu' && (
        <div className="chess-menu">
          <h1>–û–Ω–ª–∞–π–Ω –®–∞—Ö–º–∞—Ç—ã</h1>
          
          <div className="chess-sections">
            <div className="chess-section">
              <h2>–ú–æ–∏ –∏–≥—Ä—ã</h2>
              {myGames.length === 0 ? (
                <p className="no-games">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä</p>
              ) : (
                <div className="games-list">
                  {myGames.map((g) => {
                    if (!currentUserId) return null;
                    
                    const isChallenger = g.challenger_id === currentUserId;
                    const isPending = g.status === 'pending';
                    const opponent = g.white_player_id === currentUserId 
                      ? { 
                          name: g.black_full_name || g.black_username, 
                          avatar: g.black_avatar,
                          banner: g.black_player_banner,
                          frame: g.black_player_frame,
                          usernameStyle: g.black_username_style
                        }
                      : { 
                          name: g.white_full_name || g.white_username, 
                          avatar: g.white_avatar,
                          banner: g.white_player_banner,
                          frame: g.white_player_frame,
                          usernameStyle: g.white_username_style
                        };
                    
                    const frameImage = getFrameImage(opponent.frame);
                    const avatarUrl = opponent.avatar ? `${BASE_URL}${opponent.avatar}` : '/default-avatar.png';
                    const bannerImage = getBannerImage(opponent.banner);
                    const defaultBanner = opponent.banner === 'default' 
                      ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                      : 'rgba(255, 255, 255, 0.08)';

                    return (
                      <div 
                        key={g.id} 
                        className="game-card"
                        style={{
                          backgroundImage: bannerImage 
                            ? `url(${bannerImage})` 
                            : defaultBanner,
                          backgroundSize: 'cover',
                          backgroundPosition: 'center'
                        }}
                      >
                        {(bannerImage || opponent.banner === 'default') && (
                          <div className="game-card-overlay"></div>
                        )}
                        <div className="game-info">
                          <div className="opponent-avatar-wrapper">
                            <img 
                              src={avatarUrl} 
                              alt={opponent.name}
                              className="opponent-avatar"
                            />
                            {frameImage && (
                              <img 
                                src={frameImage}
                                alt="Frame"
                                className="opponent-avatar-frame"
                              />
                            )}
                          </div>
                          <div>
                            <h3 className={`styled-username ${opponent.usernameStyle || 'username-none'}`}>
                              {opponent.name}
                            </h3>
                            <p className="game-status-text">
                              {isPending 
                                ? (isChallenger ? '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...' : `–í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ (—Å—Ç–∞–≤–∫–∞: ${g.bet_amount || 0} üíé)`) 
                                : '–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞'}
                            </p>
                            {g.bet_amount > 0 && (
                              <p className="bet-info">–°—Ç–∞–≤–∫–∞: {g.bet_amount} üíé</p>
                            )}
                          </div>
                        </div>
                        <div className="game-actions">
                          {isPending && !isChallenger && (
                            <>
                              <button 
                                className="btn-accept"
                                onClick={() => acceptChallenge(g.id, g.challenger_id)}
                              >
                                –ü—Ä–∏–Ω—è—Ç—å
                              </button>
                              <button 
                                className="btn-decline"
                                onClick={() => declineChallenge(g.id, g.challenger_id)}
                              >
                                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                              </button>
                            </>
                          )}
                          {g.status === 'active' && (
                            <button 
                              className="btn-play"
                              onClick={() => loadGame(g.id)}
                            >
                              –ò–≥—Ä–∞—Ç—å
                            </button>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            <div className="chess-section">
              <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏</h2>
              <button 
                className="btn-challenge"
                onClick={() => setView('challenge')}
              >
                –ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤
              </button>
            </div>
          </div>
        </div>
      )}

      {view === 'challenge' && (
        <div className="challenge-view">
          <button className="btn-back" onClick={() => setView('menu')}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h2>
          
          <div className="bet-selector">
            <label>
              <span>–°—Ç–∞–≤–∫–∞ (–±–∞–ª–ª—ã):</span>
              <input
                type="number"
                min="0"
                step="10"
                value={betAmount}
                onChange={(e) => setBetAmount(parseInt(e.target.value) || 0)}
                className="bet-input"
              />
            </label>
            <p className="bet-hint">
              ü™ô –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –ø–æ–ª—É—á–∏—Ç–µ {betAmount * 2 - Math.floor(betAmount * 2 * 0.05)} –±–∞–ª–ª–æ–≤ (–∫–æ–º–∏—Å—Å–∏—è 5%)
            </p>
          </div>
          
          <div className="color-selector">
            <label>
              <input
                type="radio"
                value="white"
                checked={selectedColor === 'white'}
                onChange={() => setSelectedColor('white')}
              />
              –ò–≥—Ä–∞—Ç—å –±–µ–ª—ã–º–∏
            </label>
            <label>
              <input
                type="radio"
                value="black"
                checked={selectedColor === 'black'}
                onChange={() => setSelectedColor('black')}
              />
              –ò–≥—Ä–∞—Ç—å —á—ë—Ä–Ω—ã–º–∏
            </label>
          </div>

          <div className="players-list">
            {availablePlayers.map((player) => {
              const frameImage = getFrameImage(player.avatar_frame);
              const avatarUrl = player.avatar_url ? `${BASE_URL}${player.avatar_url}` : '/default-avatar.png';
              const bannerImage = getBannerImage(player.profile_banner);
              const defaultBanner = player.profile_banner === 'default' 
                ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                : 'rgba(255, 255, 255, 0.05)';
              
              return (
                <div 
                  key={player.id} 
                  className="player-card"
                  style={{
                    backgroundImage: bannerImage 
                      ? `url(${bannerImage})` 
                      : defaultBanner,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center'
                  }}
                >
                  {(bannerImage || player.profile_banner === 'default') && (
                    <div className="player-card-overlay"></div>
                  )}
                  <div className="player-avatar-wrapper">
                    <img 
                      src={avatarUrl} 
                      alt={player.full_name}
                      className="player-avatar"
                    />
                    {frameImage && (
                      <img 
                        src={frameImage}
                        alt="Frame"
                        className="player-avatar-frame-small"
                      />
                    )}
                  </div>
                  <div className="player-info">
                    <h3 className={`styled-username ${player.username_style || 'username-none'}`}>
                      {player.full_name || player.username}
                    </h3>
                    <span className={`status ${player.is_online ? 'online' : 'offline'}`}>
                      {player.is_online ? '–í —Å–µ—Ç–∏' : '–ù–µ –≤ —Å–µ—Ç–∏'}
                    </span>
                  </div>
                  <button 
                    className="btn-send-challenge"
                    onClick={() => sendChallenge(player.id)}
                  >
                    –í—ã–∑–≤–∞—Ç—å
                  </button>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {view === 'game' && currentGame && (
        <div className="game-view">
          <button className="btn-back" onClick={backToMenu}>
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é
          </button>
          
          <div className="game-layout">
            <div className="board-container">
              <h2 className="game-status">{gameStatus}</h2>
              
              {/* –¢–∞–π–º–µ—Ä */}
              <div className="timer-display">
                <div className={`timer ${game.turn() === 'w' && playerColor === 'white' || game.turn() === 'b' && playerColor === 'black' ? 'active' : ''}`}>
                  <span className="timer-label">–í–∞—à–µ –≤—Ä–µ–º—è:</span>
                  <span className={`timer-value ${displayTime < 30 ? 'warning' : ''}`}>
                    {Math.floor(displayTime / 60)}:{String(displayTime % 60).padStart(2, '0')}
                  </span>
                  {displayTime < 30 && <span className="grace-period">‚ö†Ô∏è –ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏!</span>}
                </div>
                <div className="timer">
                  <span className="timer-label">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:</span>
                  <span className="timer-value">
                    {Math.floor(opponentTimeLeft / 60)}:{String(opponentTimeLeft % 60).padStart(2, '0')}
                  </span>
                </div>
              </div>
              
              <Chessboard
                position={game.fen()}
                onPieceDrop={onDrop}
                boardOrientation={playerColor}
                customBoardStyle={{
                  borderRadius: '5px',
                  boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'
                }}
              />
            </div>

            <div className="game-sidebar">
              <div className="players-info">
                {/* –ë–µ–ª—ã–µ */}
                <div className="chess-player-card">
                  {getBannerImage(currentGame.white_player_banner) && (
                    <div 
                      className="chess-player-banner"
                      style={{ backgroundImage: `url(${getBannerImage(currentGame.white_player_banner)})` }}
                    />
                  )}
                  <div className="chess-avatar-container">
                    <img 
                      src={currentGame.white_avatar ? `${BASE_URL}${currentGame.white_avatar}` : '/default-avatar.png'} 
                      alt="–ë–µ–ª—ã–µ"
                      className="chess-avatar"
                    />
                    {getFrameImage(currentGame.white_player_frame) && (
                      <img 
                        src={getFrameImage(currentGame.white_player_frame)}
                        alt="Frame"
                        className="chess-avatar-frame"
                      />
                    )}
                  </div>
                  <span className={`chess-player-name styled-username ${currentGame.white_username_style || 'username-none'}`}>
                    {currentGame.white_full_name || currentGame.white_username}
                  </span>
                </div>

                {/* –ß—ë—Ä–Ω—ã–µ */}
                <div className="chess-player-card">
                  {getBannerImage(currentGame.black_player_banner) && (
                    <div 
                      className="chess-player-banner"
                      style={{ backgroundImage: `url(${getBannerImage(currentGame.black_player_banner)})` }}
                    />
                  )}
                  <div className="chess-avatar-container">
                    <img 
                      src={currentGame.black_avatar ? `${BASE_URL}${currentGame.black_avatar}` : '/default-avatar.png'} 
                      alt="–ß—ë—Ä–Ω—ã–µ"
                      className="chess-avatar"
                    />
                    {getFrameImage(currentGame.black_player_frame) && (
                      <img 
                        src={getFrameImage(currentGame.black_player_frame)}
                        alt="Frame"
                        className="chess-avatar-frame"
                      />
                    )}
                  </div>
                  <span className={`chess-player-name styled-username ${currentGame.black_username_style || 'username-none'}`}>
                    {currentGame.black_full_name || currentGame.black_username}
                  </span>
                </div>
              </div>

              <div className="move-history">
                <h3>–ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤</h3>
                <div className="moves-list">
                  {moveHistory.map((move, index) => (
                    <div key={index} className={`move ${index % 2 === 0 ? 'white' : 'black'}`}>
                      <span className="move-number">{Math.floor(index / 2) + 1}.</span>
                      <span className="move-text">{move.san || move}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="game-controls">
                <button className="btn-resign" onClick={resign}>
                  –°–¥–∞—Ç—å—Å—è
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OnlineChess;
