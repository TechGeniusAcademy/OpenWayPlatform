import { useState, useEffect } from 'react';
import api, { BASE_URL } from '../utils/api';
import './GameManagement.css';

function GameCards() {
  const [cards, setCards] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingCard, setEditingCard] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null); // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    image_url: '',
    card_type: 'skip_turn',
    effect_value: 0,
    drop_chance: 10.0,
    team: 'neutral'
  });

  const cardTypes = [
    { value: 'skip_turn', label: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ (-5 –±–∞–ª–ª–æ–≤)', effect: -5 },
    { value: 'transfer_question', label: 'üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –≤–æ–ø—Ä–æ—Å–∞', effect: 0 },
    { value: 'extra_questions', label: '‚ûï –î–æ–ø. –≤–æ–ø—Ä–æ—Å—ã (+3)', effect: 3 },
    { value: 'double_points', label: '2Ô∏è‚É£ –£–¥–≤–æ–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ (x2)', effect: 2 },
    { value: 'steal_points', label: 'üí∞ –ö—Ä–∞–∂–∞ –±–∞–ª–ª–æ–≤ (+10)', effect: 10 },
    { value: 'time_bonus', label: '‚è∞ –ë–æ–Ω—É—Å –≤—Ä–µ–º–µ–Ω–∏ (+30—Å–µ–∫)', effect: 30 },
    { value: 'minus_time', label: '‚è±Ô∏è –ú–∏–Ω—É—Å –≤—Ä–µ–º–µ–Ω–∏ (-15—Å–µ–∫)', effect: -15 },
    { value: 'random_event', label: 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ', effect: 0 }
  ];

  useEffect(() => {
    fetchCards();
  }, []);

  const fetchCards = async () => {
    try {
      const response = await api.get('/game/cards');
      setCards(response.data.cards);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    }
  };

  const openForm = (card = null) => {
    if (card) {
      setEditingCard(card);
      setFormData(card);
    } else {
      setEditingCard(null);
      setFormData({
        name: '',
        description: '',
        image_url: '',
        card_type: 'skip_turn',
        effect_value: 0,
        drop_chance: 10.0,
        team: 'neutral'
      });
    }
    setSelectedImage(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    setShowForm(true);
  };

  const closeForm = () => {
    setShowForm(false);
    setEditingCard(null);
    setSelectedImage(null);
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedImage(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      const formDataToSend = new FormData();
      formDataToSend.append('name', formData.name);
      formDataToSend.append('description', formData.description);
      formDataToSend.append('card_type', formData.card_type);
      formDataToSend.append('effect_value', formData.effect_value);
      formDataToSend.append('drop_chance', formData.drop_chance);
      formDataToSend.append('team', formData.team);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
      if (selectedImage) {
        formDataToSend.append('image', selectedImage);
      }
      
      if (editingCard) {
        await api.put(`/game/cards/${editingCard.id}`, formDataToSend, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });
      } else {
        await api.post('/game/cards', formDataToSend, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });
      }
      
      fetchCards();
      closeForm();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?')) return;
    
    try {
      await api.delete(`/game/cards/${id}`);
      fetchCards();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    }
  };

  const getCardTypeLabel = (type) => {
    const cardType = cardTypes.find(ct => ct.value === type);
    return cardType ? cardType.label : type;
  };

  return (
    <div className="game-cards-management">
      <div className="header">
        <h2> –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–≥—Ä—ã</h2>
        <button className="btn-primary" onClick={() => openForm()}>
          + –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        </button>
      </div>

      <div className="cards-grid">
        {cards.map(card => (
          <div key={card.id} className={`card-item ${card.team}`}>
            <div className="card-image">
              {card.image_url ? (
                <img src={`${BASE_URL}${card.image_url}`} alt={card.name} />
              ) : (
                <div className="placeholder-image">üé¥</div>
              )}
            </div>
            
            <div className="card-content">
              <h3>{card.name}</h3>
              <p className="card-description">{card.description}</p>
              
              <div className="card-stats">
                <div className="stat">
                  <span className="label">–¢–∏–ø:</span>
                  <span className="value">{getCardTypeLabel(card.card_type)}</span>
                </div>
                <div className="stat">
                  <span className="label">–≠—Ñ—Ñ–µ–∫—Ç:</span>
                  <span className="value">{card.effect_value}</span>
                </div>
                <div className="stat">
                  <span className="label">–®–∞–Ω—Å:</span>
                  <span className="value">{card.drop_chance}%</span>
                </div>
                <div className="stat">
                  <span className="label">–ö–æ–º–∞–Ω–¥–∞:</span>
                  <span className={`team-badge ${card.team}`}>
                    {card.team === 'team_a' ? '–ö–æ–º–∞–Ω–¥–∞' : card.team === 'team_b' ? '–ö–æ–º–∞–Ω–¥–∞' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}
                  </span>
                </div>
              </div>
            </div>
            
            <div className="card-actions">
              <button onClick={() => openForm(card)} className="btn-edit">‚úèÔ∏è</button>
              <button onClick={() => handleDelete(card.id)} className="btn-delete">üóëÔ∏è</button>
            </div>
          </div>
        ))}
      </div>

      {cards.length === 0 && (
        <div className="empty-state">
          <p>üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>
        </div>
      )}

      {/* Form Modal */}
      {showForm && (
        <div className="modal-overlay" onClick={closeForm}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h3>{editingCard ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É' : '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'}</h3>
            
            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  required
                />
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏</label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageChange}
                />
                {selectedImage && (
                  <p style={{ marginTop: '10px', color: 'black', fontSize: '14px' }}>
                    ‚úì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selectedImage.name}
                  </p>
                )}
                {editingCard?.image_url && !selectedImage && (
                  <div style={{ marginTop: '10px' }}>
                    <img 
                      src={`${BASE_URL}${editingCard.image_url}`} 
                      alt="–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
                      style={{ maxWidth: '200px', maxHeight: '150px', borderRadius: '8px' }}
                    />
                    <p style={{ fontSize: '12px', color: '#888', marginTop: '5px' }}>
                      –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å)
                    </p>
                  </div>
                )}
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏</label>
                  <select
                    value={formData.card_type}
                    onChange={(e) => {
                      const selectedType = cardTypes.find(ct => ct.value === e.target.value);
                      setFormData({
                        ...formData, 
                        card_type: e.target.value,
                        effect_value: selectedType?.effect || 0
                      });
                    }}
                  >
                    {cardTypes.map(type => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)</label>
                  <input
                    type="number"
                    value={formData.effect_value}
                    onChange={(e) => setFormData({...formData, effect_value: parseInt(e.target.value)})}
                    readOnly
                    disabled
                    style={{ backgroundColor: '#2d2d2d', color: '#888', cursor: 'not-allowed' }}
                    title="–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"
                  />
                  <p style={{ fontSize: '12px', color: '#888', marginTop: '5px' }}>
                    ‚ÑπÔ∏è –≠—Ç–æ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
                  </p>
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è (%)</label>
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    max="100"
                    value={formData.drop_chance}
                    onChange={(e) => setFormData({...formData, drop_chance: parseFloat(e.target.value)})}
                    required
                  />
                </div>

                <div className="form-group">
                  <label>–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å</label>
                  <select
                    value={formData.team}
                    onChange={(e) => setFormData({...formData, team: e.target.value})}
                  >
                    <option value="neutral">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è</option>
                    <option value="team_a">–ö–æ–º–∞–Ω–¥–∞</option>
                    <option value="team_b">–ö–æ–º–∞–Ω–¥–∞</option>
                  </select>
                </div>
              </div>

              <div className="form-actions">
                <button type="button" onClick={closeForm}>–û—Ç–º–µ–Ω–∞</button>
                <button type="submit" className="btn-primary">
                  {editingCard ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default GameCards;
