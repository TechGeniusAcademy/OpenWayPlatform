import { useState, useEffect } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import api from '../utils/api';
import './KnowledgeBaseManagement.css';

// Wrapper –¥–ª—è ReactQuill —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å findDOMNode warning
const QuillEditor = ({ value, onChange, modules, placeholder }) => {
  return (
    <ReactQuill
      theme="snow"
      value={value}
      onChange={onChange}
      modules={modules}
      placeholder={placeholder}
    />
  );
};

function KnowledgeBaseManagement() {
  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const [articles, setArticles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('categories'); // 'categories', 'subcategories' –∏–ª–∏ 'articles'
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [showSubcategoryModal, setShowSubcategoryModal] = useState(false);
  const [showArticleModal, setShowArticleModal] = useState(false);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º
  const [editingCategory, setEditingCategory] = useState(null);
  const [editingSubcategory, setEditingSubcategory] = useState(null);
  const [editingArticle, setEditingArticle] = useState(null);
  
  const [categoryForm, setCategoryForm] = useState({
    name: '',
    icon: 'üìö',
    description: ''
  });

  const [subcategoryForm, setSubcategoryForm] = useState({
    name: '',
    category_id: '',
    icon: 'üìÑ',
    description: '',
    order_index: 0
  });

  const [articleForm, setArticleForm] = useState({
    title: '',
    category_id: '',
    subcategory_id: '',
    description: '',
    content: '',
    published: true
  });

  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const iconOptions = ['üìö', 'üíª', 'üåê', 'üóÑÔ∏è', 'üßÆ', 'üîÄ', 'üé®', 'üîß', 'üìä', 'üöÄ', 'üí°', 'üéØ', 'üîê', 'üì±', '‚öôÔ∏è'];
  
  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const subIconOptions = ['üìÑ', 'üìù', 'üìã', 'üìå', 'üìç', 'üî§', '‚ö°', 'üì¶', '‚è±Ô∏è', 'üéØ', 'üîß', '‚öôÔ∏è', 'üõ†Ô∏è', 'üí°', 'üîç'];

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const categoriesRes = await api.get('/knowledge-base/categories');
      const subcategoriesRes = await api.get('/knowledge-base/subcategories');
      const articlesRes = await api.get('/knowledge-base/articles');
      
      setCategories(categoriesRes.data);
      setSubcategories(subcategoriesRes.data);
      setArticles(articlesRes.data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategorySubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      if (editingCategory) {
        await api.put(`/knowledge-base/categories/${editingCategory.id}`, categoryForm);
        setSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        await api.post('/knowledge-base/categories', categoryForm);
        setSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      setShowCategoryModal(false);
      resetCategoryForm();
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  const handleEditCategory = (category) => {
    setEditingCategory(category);
    setCategoryForm({
      name: category.name,
      icon: category.icon,
      description: category.description || ''
    });
    setShowCategoryModal(true);
  };

  const handleDeleteCategory = async (categoryId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é? –í—Å–µ —Å—Ç–∞—Ç—å–∏ –≤ –Ω–µ–π —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
      return;
    }

    try {
      await api.delete(`/knowledge-base/categories/${categoryId}`);
      setSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  const resetCategoryForm = () => {
    setEditingCategory(null);
    setCategoryForm({ name: '', icon: 'üìö', description: '' });
  };

  // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleSubcategorySubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      if (editingSubcategory) {
        await api.put(`/knowledge-base/subcategories/${editingSubcategory.id}`, subcategoryForm);
        setSuccess('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        await api.post('/knowledge-base/subcategories', subcategoryForm);
        setSuccess('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      setShowSubcategoryModal(false);
      resetSubcategoryForm();
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  const handleEditSubcategory = (subcategory) => {
    setEditingSubcategory(subcategory);
    setSubcategoryForm({
      name: subcategory.name,
      category_id: subcategory.category_id,
      icon: subcategory.icon,
      description: subcategory.description || '',
      order_index: subcategory.order_index || 0
    });
    setShowSubcategoryModal(true);
  };

  const handleDeleteSubcategory = async (subcategoryId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é? –í—Å–µ —Å—Ç–∞—Ç—å–∏ –≤ –Ω–µ–π —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
      return;
    }

    try {
      await api.delete(`/knowledge-base/subcategories/${subcategoryId}`);
      setSuccess('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  const resetSubcategoryForm = () => {
    setEditingSubcategory(null);
    setSubcategoryForm({ name: '', category_id: '', icon: 'üìÑ', description: '', order_index: 0 });
  };

  // –°—Ç–∞—Ç—å–∏
  const handleArticleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      if (editingArticle) {
        await api.put(`/knowledge-base/articles/${editingArticle.id}`, articleForm);
        setSuccess('–°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        await api.post('/knowledge-base/articles', articleForm);
        setSuccess('–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      setShowArticleModal(false);
      resetArticleForm();
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  const handleEditArticle = (article) => {
    setEditingArticle(article);
    setArticleForm({
      title: article.title,
      category_id: article.category_id,
      subcategory_id: article.subcategory_id || '',
      description: article.description,
      content: article.content || '',
      published: article.published
    });
    setShowArticleModal(true);
  };

  const handleDeleteArticle = async (articleId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?')) {
      return;
    }

    try {
      await api.delete(`/knowledge-base/articles/${articleId}`);
      setSuccess('–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞');
      loadData();
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  };

  const resetArticleForm = () => {
    setEditingArticle(null);
    setArticleForm({
      title: '',
      category_id: '',
      subcategory_id: '',
      description: '',
      content: '',
      published: true
    });
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Quill
  const quillModules = {
    toolbar: [
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      [{ 'color': [] }, { 'background': [] }],
      [{ 'align': [] }],
      ['link', 'image', 'code-block'],
      ['clean']
    ]
  };

  if (loading) {
    return (
      <div className="kb-management-loading">
        <div className="loader"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  return (
    <div className="kb-management">
      <div className="kb-management-header">
        <h1>üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–∞–∑–æ–π –ó–Ω–∞–Ω–∏–π</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤</p>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {error && <div className="alert alert-error">{error}</div>}
      {success && <div className="alert alert-success">{success}</div>}

      {/* –¢–∞–±—ã */}
      <div className="kb-tabs">
        <button
          className={`kb-tab ${activeTab === 'categories' ? 'active' : ''}`}
          onClick={() => setActiveTab('categories')}
        >
          üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({categories.length})
        </button>
        <button
          className={`kb-tab ${activeTab === 'subcategories' ? 'active' : ''}`}
          onClick={() => setActiveTab('subcategories')}
        >
          üìë –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({subcategories.length})
        </button>
        <button
          className={`kb-tab ${activeTab === 'articles' ? 'active' : ''}`}
          onClick={() => setActiveTab('articles')}
        >
          üìÑ –°—Ç–∞—Ç—å–∏ ({articles.length})
        </button>
      </div>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {activeTab === 'categories' && (
        <div className="kb-section">
          <div className="kb-section-header">
            <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
            <button
              className="btn btn-primary"
              onClick={() => {
                resetCategoryForm();
                setShowCategoryModal(true);
              }}
            >
              + –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </button>
          </div>

          <div className="categories-grid">
            {categories.length === 0 ? (
              <div className="empty-state">
                <p>–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</p>
              </div>
            ) : (
              categories.map(category => (
                <div key={category.id} className="category-card">
                  <div className="category-icon">{category.icon}</div>
                  <h3>{category.name}</h3>
                  <p>{category.description}</p>
                  <div className="category-stats">
                    üìÑ {category.articles_count} —Å—Ç–∞—Ç–µ–π
                  </div>
                  <div className="category-actions">
                    <button
                      className="btn btn-small btn-edit"
                      onClick={() => handleEditCategory(category)}
                    >
                      ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                    <button
                      className="btn btn-small btn-delete"
                      onClick={() => handleDeleteCategory(category.id)}
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}

      {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {activeTab === 'subcategories' && (
        <div className="kb-section">
          <div className="kb-section-header">
            <h2>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
            <button
              className="btn btn-primary"
              onClick={() => {
                resetSubcategoryForm();
                setShowSubcategoryModal(true);
              }}
            >
              + –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </button>
          </div>

          <div className="kb-categories-grid">
            {subcategories.map(subcategory => (
              <div key={subcategory.id} className="kb-category-card">
                <div className="kb-category-icon">{subcategory.icon}</div>
                <div className="kb-category-info">
                  <h3>{subcategory.name}</h3>
                  <p className="category-name">üìÅ {subcategory.category_name}</p>
                  <p>{subcategory.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                  <span className="kb-category-count">
                    {subcategory.articles_count} {subcategory.articles_count === 1 ? '—Å—Ç–∞—Ç—å—è' : '—Å—Ç–∞—Ç–µ–π'}
                  </span>
                </div>
                <div className="kb-category-actions">
                  <button
                    className="btn btn-small btn-edit"
                    onClick={() => handleEditSubcategory(subcategory)}
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button
                    className="btn btn-small btn-delete"
                    onClick={() => handleDeleteSubcategory(subcategory.id)}
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç—å–∏ */}
      {activeTab === 'articles' && (
        <div className="kb-section">
          <div className="kb-section-header">
            <h2>–°—Ç–∞—Ç—å–∏</h2>
            <button
              className="btn btn-primary"
              onClick={() => {
                resetArticleForm();
                setShowArticleModal(true);
              }}
            >
              + –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é
            </button>
          </div>

          <div className="articles-table">
            {articles.length === 0 ? (
              <div className="empty-state">
                <p>–ù–µ—Ç —Å—Ç–∞—Ç–µ–π</p>
              </div>
            ) : (
              <table>
                <thead>
                  <tr>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                    <th>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {articles.map(article => (
                    <tr key={article.id}>
                      <td>
                        <strong>{article.title}</strong>
                        <br />
                        <small>{article.description}</small>
                      </td>
                      <td>{article.category_name}</td>
                      <td>{article.subcategory_name || '‚Äî'}</td>
                      <td>üëÅÔ∏è {article.views}</td>
                      <td>
                        <span className={`status-badge ${article.published ? 'published' : 'draft'}`}>
                          {article.published ? '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}
                        </span>
                      </td>
                      <td>{new Date(article.created_at).toLocaleDateString('ru-RU')}</td>
                      <td>
                        <div className="action-buttons">
                          <button
                            className="btn btn-small btn-edit"
                            onClick={() => handleEditArticle(article)}
                          >
                            ‚úèÔ∏è
                          </button>
                          <button
                            className="btn btn-small btn-delete"
                            onClick={() => handleDeleteArticle(article.id)}
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {showCategoryModal && (
        <div className="modal-overlay" onClick={() => setShowCategoryModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{editingCategory ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' : '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'}</h2>
              <button className="modal-close" onClick={() => setShowCategoryModal(false)}>‚úï</button>
            </div>
            
            <form onSubmit={handleCategorySubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                <input
                  type="text"
                  value={categoryForm.name}
                  onChange={(e) => setCategoryForm({ ...categoryForm, name: e.target.value })}
                  required
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Web-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
                />
              </div>

              <div className="form-group">
                <label>–ò–∫–æ–Ω–∫–∞</label>
                <div className="icon-selector">
                  {iconOptions.map(icon => (
                    <button
                      key={icon}
                      type="button"
                      className={`icon-option ${categoryForm.icon === icon ? 'selected' : ''}`}
                      onClick={() => setCategoryForm({ ...categoryForm, icon })}
                    >
                      {icon}
                    </button>
                  ))}
                </div>
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={categoryForm.description}
                  onChange={(e) => setCategoryForm({ ...categoryForm, description: e.target.value })}
                  rows="3"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                />
              </div>

              <div className="modal-actions">
                <button type="button" className="btn btn-secondary" onClick={() => setShowCategoryModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn btn-primary">
                  {editingCategory ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {showSubcategoryModal && (
        <div className="modal-overlay" onClick={() => setShowSubcategoryModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{editingSubcategory ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é' : '–ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'}</h2>
              <button className="modal-close" onClick={() => setShowSubcategoryModal(false)}>‚úï</button>
            </div>
            
            <form onSubmit={handleSubcategorySubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                <input
                  type="text"
                  value={subcategoryForm.name}
                  onChange={(e) => setSubcategoryForm({ ...subcategoryForm, name: e.target.value })}
                  required
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –æ—Å–Ω–æ–≤—ã"
                />
              </div>

              <div className="form-group">
                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                <select
                  value={subcategoryForm.category_id}
                  onChange={(e) => setSubcategoryForm({ ...subcategoryForm, category_id: e.target.value })}
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                  {categories.map(cat => (
                    <option key={cat.id} value={cat.id}>
                      {cat.icon} {cat.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label>–ò–∫–æ–Ω–∫–∞</label>
                <div className="icon-selector">
                  {subIconOptions.map(icon => (
                    <button
                      key={icon}
                      type="button"
                      className={`icon-option ${subcategoryForm.icon === icon ? 'selected' : ''}`}
                      onClick={() => setSubcategoryForm({ ...subcategoryForm, icon })}
                    >
                      {icon}
                    </button>
                  ))}
                </div>
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={subcategoryForm.description}
                  onChange={(e) => setSubcategoryForm({ ...subcategoryForm, description: e.target.value })}
                  rows="3"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                />
              </div>

              <div className="form-group">
                <label>–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                <input
                  type="number"
                  value={subcategoryForm.order_index}
                  onChange={(e) => setSubcategoryForm({ ...subcategoryForm, order_index: parseInt(e.target.value) || 0 })}
                  placeholder="0"
                  min="0"
                />
              </div>

              <div className="modal-actions">
                <button type="button" className="btn btn-secondary" onClick={() => setShowSubcategoryModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn btn-primary">
                  {editingSubcategory ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—å–∏ */}
      {showArticleModal && (
        <div className="modal-overlay" onClick={() => setShowArticleModal(false)}>
          <div className="modal-content modal-large" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{editingArticle ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é' : '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è'}</h2>
              <button className="modal-close" onClick={() => setShowArticleModal(false)}>‚úï</button>
            </div>
            
            <form onSubmit={handleArticleSubmit}>
              <div className="form-fields-wrapper">
                <div className="form-row">
                  <div className="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ *</label>
                    <input
                      type="text"
                      value={articleForm.title}
                      onChange={(e) => setArticleForm({ ...articleForm, title: e.target.value })}
                      required
                      placeholder="–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript"
                    />
                  </div>

                  <div className="form-group">
                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                    <select
                      value={articleForm.category_id}
                      onChange={(e) => setArticleForm({ ...articleForm, category_id: e.target.value, subcategory_id: '' })}
                      required
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                      {categories.map(cat => (
                        <option key={cat.id} value={cat.id}>
                          {cat.icon} {cat.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="form-group">
                    <label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                    <select
                      value={articleForm.subcategory_id}
                      onChange={(e) => setArticleForm({ ...articleForm, subcategory_id: e.target.value })}
                      disabled={!articleForm.category_id}
                    >
                      <option value="">–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                      {subcategories
                        .filter(sub => sub.category_id === parseInt(articleForm.category_id))
                        .map(sub => (
                          <option key={sub.id} value={sub.id}>
                            {sub.icon} {sub.name}
                          </option>
                        ))}
                    </select>
                  </div>
                </div>

                <div className="form-group">
                  <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                  <input
                    type="text"
                    value={articleForm.description}
                    onChange={(e) => setArticleForm({ ...articleForm, description: e.target.value })}
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é"
                  />
                </div>

                <div className="form-group quill-editor-group">
                  <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ *</label>
                  <div className="quill-editor-wrapper">
                    <QuillEditor
                      value={articleForm.content}
                      onChange={(content) => setArticleForm({ ...articleForm, content })}
                      modules={quillModules}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏..."
                    />
                  </div>
                </div>

                <div className="form-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={articleForm.published}
                    onChange={(e) => setArticleForm({ ...articleForm, published: e.target.checked })}
                  />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é
                </label>
              </div>
              </div>

              <div className="modal-actions">
                <button type="button" className="btn btn-secondary" onClick={() => setShowArticleModal(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn btn-primary">
                  {editingArticle ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default KnowledgeBaseManagement;
