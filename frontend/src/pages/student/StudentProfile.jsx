import { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import api, { BASE_URL } from '../../utils/api';
import './StudentProfile.css';
import '../../styles/UsernameStyles.css';

function StudentProfile() {
  const { user, updateUser } = useAuth();
  const [uploading, setUploading] = useState(false);
  const [preview, setPreview] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [userPoints, setUserPoints] = useState(0);
  const [appliedFrame, setAppliedFrame] = useState(null);
  const [appliedBanner, setAppliedBanner] = useState(null);

  useEffect(() => {
    fetchUserPoints();
    refreshUserData();
    fetchAppliedCosmetics();
  }, []);

  useEffect(() => {
    fetchAppliedCosmetics();
  }, [user?.avatar_frame, user?.profile_banner]);

  const fetchUserPoints = async () => {
    try {
      const response = await api.get('/points/my');
      setUserPoints(response.data.totalPoints || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
    }
  };

  const refreshUserData = async () => {
    try {
      const response = await api.get('/auth/me');
      if (response.data.user) {
        updateUser(response.data.user);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  const fetchAppliedCosmetics = async () => {
    try {
      const response = await api.get('/shop/items');
      const items = response.data.items;
      
      if (user?.avatar_frame && user.avatar_frame !== 'none') {
        const frame = items.find(item => item.item_key === user.avatar_frame);
        setAppliedFrame(frame);
      } else {
        setAppliedFrame(null);
      }
      
      if (user?.profile_banner && user.profile_banner !== 'default') {
        const banner = items.find(item => item.item_key === user.profile_banner);
        setAppliedBanner(banner);
      } else {
        setAppliedBanner(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏:', error);
    }
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WebP)');
        e.target.value = '';
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB = 5 * 1024 * 1024 –±–∞–π—Ç)
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë');
        e.target.value = ''; // –°–±—Ä–æ—Å input
        return;
      }

      setSelectedFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleAvatarUpload = async () => {
    if (!selectedFile) return;

    try {
      setUploading(true);
      const formData = new FormData();
      formData.append('avatar', selectedFile);

      const response = await api.post(
        '/users/me/avatar',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      const updatedUser = { ...user, avatar_url: response.data.avatar_url };
      updateUser(updatedUser);
      
      setPreview(null);
      setSelectedFile(null);
      alert('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      alert(error.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞');
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="student-page">
      <div className="page-header">
        <h1>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
        <div className="header-actions">
          <div className="user-points">
            <span className="points-icon">üí∞</span>
            <span className="points-value">{userPoints}</span>
            <span className="points-label">–±–∞–ª–ª–æ–≤</span>
          </div>
        </div>
      </div>

      <div className="profile-card">
        <div className="profile-avatar-section" style={{
          backgroundImage: appliedBanner?.image_url 
            ? `url(${BASE_URL}${appliedBanner.image_url})`
            : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        }}>
          <div className="avatar-wrapper">
            {preview || user?.avatar_url ? (
              <img 
                src={preview || `${BASE_URL}${user.avatar_url}`} 
                alt={user.username}
                className="profile-avatar"
              />
            ) : (
              <div className="profile-avatar-placeholder">
                {(user?.full_name || user?.username || 'U').charAt(0).toUpperCase()}
              </div>
            )}
            {appliedFrame?.image_url && (
              <img 
                src={`${BASE_URL}${appliedFrame.image_url}`}
                alt="Frame"
                className="avatar-frame-overlay"
              />
            )}
          </div>
          
          <div className="avatar-upload">
            <label className="avatar-upload-btn">
              {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ'}
              <input 
                type="file" 
                accept="image/*"
                onChange={handleAvatarChange}
                disabled={uploading}
                style={{ display: 'none' }}
              />
            </label>
            {preview && (
              <button 
                className="avatar-upload-confirm" 
                onClick={handleAvatarUpload}
                disabled={uploading}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        <div className="profile-info-grid">
          <div className="info-row">
            <span className="info-label">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
            <span className={`info-value styled-username ${user?.username_style || 'username-none'}`}>
              {user?.username}
            </span>
          </div>
          <div className="info-row">
            <span className="info-label">Email:</span>
            <span className="info-value">{user?.email}</span>
          </div>
          <div className="info-row">
            <span className="info-label">–§–ò–û:</span>
            <span className="info-value">{user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
          </div>
          <div className="info-row">
            <span className="info-label">–†–æ–ª—å:</span>
            <span className="info-value">–£—á–µ–Ω–∏–∫</span>
          </div>
          <div className="info-row">
            <span className="info-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
            <span className="info-value">
              {new Date(user?.created_at).toLocaleDateString('ru-RU')}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default StudentProfile;
