import { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import api, { BASE_URL } from '../../utils/api';
import './Shop.css';
import '../../styles/UsernameStyles.css';
import '../../styles/MessageColors.css';

function Shop() {
  const { user, updateUser } = useAuth();
  const [shopItems, setShopItems] = useState([]);
  const [purchases, setPurchases] = useState([]);
  const [userPoints, setUserPoints] = useState(0);
  const [loading, setLoading] = useState(false);
  
  // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
  const [selectedType, setSelectedType] = useState('all'); // 'all', 'frame', 'banner', 'username', 'message_color'
  const [searchQuery, setSearchQuery] = useState('');
  const [priceRange, setPriceRange] = useState('all'); // 'all', '0-100', '100-200', '200+'
  const [sortBy, setSortBy] = useState('price-asc'); // 'price-asc', 'price-desc', 'name'

  useEffect(() => {
    fetchUserPoints();
    fetchShopItems();
    fetchPurchases();
    refreshUserData();
  }, []);

  const refreshUserData = async () => {
    try {
      const response = await api.get('/auth/me');
      if (response.data.user) {
        updateUser(response.data.user);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };

  const fetchUserPoints = async () => {
    try {
      const response = await api.get('/points/my');
      setUserPoints(response.data.totalPoints || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
    }
  };

  const fetchShopItems = async () => {
    try {
      const response = await api.get('/shop/items');
      setShopItems(response.data.items);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    }
  };

  const fetchPurchases = async () => {
    try {
      const response = await api.get('/shop/purchases');
      setPurchases(response.data.purchases);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫:', error);
    }
  };

  const handlePurchase = async (itemKey, price) => {
    if (userPoints < price) {
      return;
    }

    setLoading(true);
    try {
      const response = await api.post('/shop/purchase', { itemKey });
      setPurchases([...purchases, itemKey]);
      setUserPoints(response.data.remainingPoints);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleApplyFrame = async (frameKey) => {
    setLoading(true);
    try {
      await api.post('/shop/apply-frame', { frameKey });
      const updatedUser = { ...user, avatar_frame: frameKey };
      updateUser(updatedUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–º–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleApplyBanner = async (bannerKey) => {
    setLoading(true);
    try {
      await api.post('/shop/apply-banner', { bannerKey });
      const updatedUser = { ...user, profile_banner: bannerKey };
      updateUser(updatedUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleApplyUsernameStyle = async (styleKey) => {
    setLoading(true);
    try {
      await api.post('/shop/apply-username-style', { styleKey });
      const updatedUser = { ...user, username_style: styleKey };
      updateUser(updatedUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –Ω–∏–∫–Ω–µ–π–º–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleApplyMessageColor = async (colorKey) => {
    setLoading(true);
    try {
      await api.post('/shop/apply-message-color', { colorKey });
      const updatedUser = { ...user, message_color: colorKey };
      updateUser(updatedUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const getFilteredItems = () => {
    let filtered = [...shopItems];

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (selectedType !== 'all') {
      filtered = filtered.filter(item => item.item_type === selectedType);
    }

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      filtered = filtered.filter(item => 
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    if (priceRange !== 'all') {
      if (priceRange === '0-100') {
        filtered = filtered.filter(item => item.price <= 100);
      } else if (priceRange === '100-200') {
        filtered = filtered.filter(item => item.price > 100 && item.price <= 200);
      } else if (priceRange === '200+') {
        filtered = filtered.filter(item => item.price > 200);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sortBy === 'price-asc') {
      filtered.sort((a, b) => a.price - b.price);
    } else if (sortBy === 'price-desc') {
      filtered.sort((a, b) => b.price - a.price);
    } else if (sortBy === 'name') {
      filtered.sort((a, b) => a.name.localeCompare(b.name));
    }

    return filtered;
  };

  const filteredItems = getFilteredItems();

  return (
    <div className="student-page shop-page">
      <div className="shop-header">
        <div className="shop-header-left">
          <h1>üõí –ú–∞–≥–∞–∑–∏–Ω –∫–æ—Å–º–µ—Ç–∏–∫–∏</h1>
          <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</p>
        </div>
        <div className="shop-header-right">
          <div className="user-points-badge">
            <span className="points-icon">‚≠ê</span>
            <div className="points-info">
              <span className="points-value">{userPoints}</span>
              <span className="points-label">–í–∞—à–∏ –±–∞–ª–ª—ã</span>
            </div>
          </div>
        </div>
      </div>

      <div className="shop-layout">
        {/* –°–∞–π–¥–±–∞—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
        <aside className="shop-sidebar">
          <div className="filter-section">
            <h3>üîç –ü–æ–∏—Å–∫</h3>
            <input 
              type="text"
              className="search-input"
              placeholder="–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>

          <div className="filter-divider"></div>

          <div className="filter-section">
            <h3>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è</h3>
            <div className="filter-options">
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="type"
                  value="all"
                  checked={selectedType === 'all'}
                  onChange={(e) => setSelectedType(e.target.value)}
                />
                <span>–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã</span>
                <span className="filter-count">{shopItems.length}</span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="type"
                  value="frame"
                  checked={selectedType === 'frame'}
                  onChange={(e) => setSelectedType(e.target.value)}
                />
                <span>üñºÔ∏è –†–∞–º–∫–∏</span>
                <span className="filter-count">
                  {shopItems.filter(i => i.item_type === 'frame').length}
                </span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="type"
                  value="banner"
                  checked={selectedType === 'banner'}
                  onChange={(e) => setSelectedType(e.target.value)}
                />
                <span>üé® –ë–∞–Ω–Ω–µ—Ä—ã</span>
                <span className="filter-count">
                  {shopItems.filter(i => i.item_type === 'banner').length}
                </span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="type"
                  value="username"
                  checked={selectedType === 'username'}
                  onChange={(e) => setSelectedType(e.target.value)}
                />
                <span>‚ú® –°—Ç–∏–ª–∏ –ù–∏–∫–Ω–µ–π–º–∞</span>
                <span className="filter-count">
                  {shopItems.filter(i => i.item_type === 'username').length}
                </span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="type"
                  value="message_color"
                  checked={selectedType === 'message_color'}
                  onChange={(e) => setSelectedType(e.target.value)}
                />
                <span>üí¨ –¶–≤–µ—Ç–∞ –¢–µ–∫—Å—Ç–∞</span>
                <span className="filter-count">
                  {shopItems.filter(i => i.item_type === 'message_color').length}
                </span>
              </label>
            </div>
          </div>

          <div className="filter-divider"></div>

          <div className="filter-section">
            <h3>üí∞ –¶–µ–Ω–∞</h3>
            <div className="filter-options">
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="price"
                  value="all"
                  checked={priceRange === 'all'}
                  onChange={(e) => setPriceRange(e.target.value)}
                />
                <span>–õ—é–±–∞—è —Ü–µ–Ω–∞</span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="price"
                  value="0-100"
                  checked={priceRange === '0-100'}
                  onChange={(e) => setPriceRange(e.target.value)}
                />
                <span>–î–æ 100 ‚≠ê</span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="price"
                  value="100-200"
                  checked={priceRange === '100-200'}
                  onChange={(e) => setPriceRange(e.target.value)}
                />
                <span>100 - 200 ‚≠ê</span>
              </label>
              <label className="filter-option">
                <input 
                  type="radio" 
                  name="price"
                  value="200+"
                  checked={priceRange === '200+'}
                  onChange={(e) => setPriceRange(e.target.value)}
                />
                <span>–û—Ç 200 ‚≠ê</span>
              </label>
            </div>
          </div>

          <div className="filter-divider"></div>

          <div className="filter-section">
            <h3>üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</h3>
            <select 
              className="sort-select"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="price-asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à—ë–≤—ã–µ</option>
              <option value="price-desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</option>
              <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
            </select>
          </div>

          <div className="filter-divider"></div>

          <div className="filter-section">
            <button 
              className="reset-filters-btn"
              onClick={() => {
                setSelectedType('all');
                setSearchQuery('');
                setPriceRange('all');
                setSortBy('price-asc');
              }}
            >
              üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        </aside>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ */}
        <main className="shop-content">
          <div className="shop-toolbar">
            <div className="results-info">
              –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <strong>{filteredItems.length}</strong>
            </div>
          </div>

          <div className="shop-items-grid">
            {/* –ë–∞–∑–æ–≤–∞—è —Ä–∞–º–∫–∞ */}
            {(selectedType === 'all' || selectedType === 'frame') && !searchQuery && (
              <div className="shop-card">
                <div className={`card-preview frame-none`}>
                  <div className="preview-avatar">
                    {user?.avatar_url ? (
                      <img src={`${BASE_URL}${user.avatar_url}`} alt="" />
                    ) : (
                      <span>{user?.username?.[0]?.toUpperCase()}</span>
                    )}
                  </div>
                </div>
                <div className="card-body">
                  <div className="shop-card-header">
                    <h3 className="card-title">–ë–µ–∑ —Ä–∞–º–∫–∏</h3>
                    {user?.avatar_frame === 'none' && (
                      <span className="badge badge-active">‚úì –ê–∫—Ç–∏–≤–Ω–∞</span>
                    )}
                  </div>
                  <p className="card-description">–ë–∞–∑–æ–≤–∞—è —Ä–∞–º–∫–∞ –±–µ–∑ —É–∫—Ä–∞—à–µ–Ω–∏–π</p>
                  <div className="card-footer">
                    <span className="card-price">
                      <span className="price-free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                    </span>
                    <button 
                      className={`card-btn ${user?.avatar_frame === 'none' ? 'btn-active' : 'btn-apply'}`}
                      onClick={() => handleApplyFrame('none')}
                      disabled={loading || user?.avatar_frame === 'none'}
                    >
                      {user?.avatar_frame === 'none' ? '‚úì –ê–∫—Ç–∏–≤–Ω–∞' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* –ë–∞–∑–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä */}
            {(selectedType === 'all' || selectedType === 'banner') && !searchQuery && (
              <div className="shop-card">
                <div className="card-banner-preview banner-default"></div>
                <div className="card-body">
                  <div className="shop-card-header">
                    <h3 className="card-title">–ë–∞–∑–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä</h3>
                    {user?.profile_banner === 'default' && (
                      <span className="badge badge-active">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>
                    )}
                  </div>
                  <p className="card-description">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä</p>
                  <div className="card-footer">
                    <span className="card-price">
                      <span className="price-free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                    </span>
                    <button 
                      className={`card-btn ${user?.profile_banner === 'default' ? 'btn-active' : 'btn-apply'}`}
                      onClick={() => handleApplyBanner('default')}
                      disabled={loading || user?.profile_banner === 'default'}
                    >
                      {user?.profile_banner === 'default' ? '‚úì –ê–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –Ω–∏–∫–Ω–µ–π–º–∞ */}
            {(selectedType === 'all' || selectedType === 'username') && !searchQuery && (
              <div className="shop-card">
                <div className="card-username-preview">
                  <div className="username-preview">
                    <span className="styled-username username-none">
                      {user?.username || '–ù–∏–∫–Ω–µ–π–º'}
                    </span>
                  </div>
                </div>
                <div className="card-body">
                  <div className="shop-card-header">
                    <h3 className="card-title">–ë–µ–∑ —Å—Ç–∏–ª—è</h3>
                    {user?.username_style === 'none' && (
                      <span className="badge badge-active">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>
                    )}
                  </div>
                  <p className="card-description">–û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤</p>
                  <div className="card-footer">
                    <span className="card-price">
                      <span className="price-free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                    </span>
                    <button 
                      className={`card-btn ${user?.username_style === 'none' ? 'btn-active' : 'btn-apply'}`}
                      onClick={() => handleApplyUsernameStyle('none')}
                      disabled={loading || user?.username_style === 'none'}
                    >
                      {user?.username_style === 'none' ? '‚úì –ê–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */}
            {(selectedType === 'all' || selectedType === 'message_color') && !searchQuery && (
              <div className="shop-card">
                <div className="card-message-preview">
                  <div className="message-preview">
                    <span className="message-none">
                      –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                    </span>
                  </div>
                </div>
                <div className="card-body">
                  <div className="shop-card-header">
                    <h3 className="card-title">–ë–µ–∑ —Ü–≤–µ—Ç–∞</h3>
                    {user?.message_color === 'none' && (
                      <span className="badge badge-active">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>
                    )}
                  </div>
                  <p className="card-description">–û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</p>
                  <div className="card-footer">
                    <span className="card-price">
                      <span className="price-free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                    </span>
                    <button 
                      className={`card-btn ${user?.message_color === 'none' ? 'btn-active' : 'btn-apply'}`}
                      onClick={() => handleApplyMessageColor('none')}
                      disabled={loading || user?.message_color === 'none'}
                    >
                      {user?.message_color === 'none' ? '‚úì –ê–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* –ú–∞–≥–∞–∑–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã */}
            {filteredItems.map(item => (
              <div key={item.id} className="shop-card">
                {item.item_type === 'frame' ? (
                  <div className="card-preview">
                    <div className="preview-avatar">
                      {user?.avatar_url ? (
                        <img src={`${BASE_URL}${user.avatar_url}`} alt="" />
                      ) : (
                        <span>{user?.username?.[0]?.toUpperCase()}</span>
                      )}
                    </div>
                    {item.image_url && (
                      <img 
                        src={`${BASE_URL}${item.image_url}`} 
                        alt={item.name}
                        className="frame-overlay"
                      />
                    )}
                  </div>
                ) : item.item_type === 'banner' ? (
                  <div className="card-banner-preview">
                    {item.image_url ? (
                      <img 
                        src={`${BASE_URL}${item.image_url}`} 
                        alt={item.name}
                        className="banner-image"
                      />
                    ) : (
                      <div className="no-image">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
                    )}
                  </div>
                ) : item.item_type === 'username' ? (
                  <div className="card-username-preview">
                    <div className="username-preview">
                      <span className={`styled-username ${item.item_key}`}>
                        {user?.username || '–ù–∏–∫–Ω–µ–π–º'}
                      </span>
                    </div>
                  </div>
                ) : item.item_type === 'message_color' ? (
                  <div className="card-message-preview">
                    <div className="message-preview">
                      <span className={item.item_key}>
                        –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                      </span>
                    </div>
                  </div>
                ) : null}
                
                <div className="card-body">
                  <div className="shop-card-header">
                    <h3 className="card-title">{item.name}</h3>
                    {purchases.includes(item.item_key) && (
                      <span className="badge badge-owned">‚úì –ö—É–ø–ª–µ–Ω–æ</span>
                    )}
                    {((item.item_type === 'frame' && user?.avatar_frame === item.item_key) ||
                      (item.item_type === 'banner' && user?.profile_banner === item.item_key) ||
                      (item.item_type === 'username' && user?.username_style === item.item_key) ||
                      (item.item_type === 'message_color' && user?.message_color === item.item_key)) && (
                      <span className="badge badge-active">‚úì –ê–∫—Ç–∏–≤–Ω–æ</span>
                    )}
                  </div>
                  <p className="card-description">{item.description}</p>
                  <div className="card-footer">
                    <span className="card-price">
                      <span className="price-icon">‚≠ê</span>
                      <span className="price-value">{item.price}</span>
                    </span>
                    {purchases.includes(item.item_key) ? (
                      <button 
                        className={`card-btn ${
                          (item.item_type === 'frame' && user?.avatar_frame === item.item_key) ||
                          (item.item_type === 'banner' && user?.profile_banner === item.item_key) ||
                          (item.item_type === 'username' && user?.username_style === item.item_key) ||
                          (item.item_type === 'message_color' && user?.message_color === item.item_key)
                            ? 'btn-active' 
                            : 'btn-apply'
                        }`}
                        onClick={() => 
                          item.item_type === 'frame' 
                            ? handleApplyFrame(item.item_key)
                            : item.item_type === 'banner'
                            ? handleApplyBanner(item.item_key)
                            : item.item_type === 'username'
                            ? handleApplyUsernameStyle(item.item_key)
                            : handleApplyMessageColor(item.item_key)
                        }
                        disabled={loading || 
                          (item.item_type === 'frame' && user?.avatar_frame === item.item_key) ||
                          (item.item_type === 'banner' && user?.profile_banner === item.item_key) ||
                          (item.item_type === 'username' && user?.username_style === item.item_key) ||
                          (item.item_type === 'message_color' && user?.message_color === item.item_key)
                        }
                      >
                        {((item.item_type === 'frame' && user?.avatar_frame === item.item_key) ||
                          (item.item_type === 'banner' && user?.profile_banner === item.item_key) ||
                          (item.item_type === 'username' && user?.username_style === item.item_key) ||
                          (item.item_type === 'message_color' && user?.message_color === item.item_key))
                          ? '‚úì –ê–∫—Ç–∏–≤–Ω–æ' 
                          : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'
                        }
                      </button>
                    ) : (
                      <button 
                        className="card-btn btn-buy"
                        onClick={() => handlePurchase(item.item_key, item.price)}
                        disabled={loading || userPoints < item.price}
                      >
                        {userPoints < item.price ? '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' : 'üõí –ö—É–ø–∏—Ç—å'}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {filteredItems.length === 0 && (
            <div className="no-results">
              <div className="no-results-icon">üîç</div>
              <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
            </div>
          )}
        </main>
      </div>
    </div>
  );
}

export default Shop;
