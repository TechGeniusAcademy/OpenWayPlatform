import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNotifications } from '../../context/NotificationContext';
import { useWebSocket } from '../../context/WebSocketContext';
import api, { BASE_URL } from '../../utils/api';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { 
  BsReply, BsPinFill, BsHeart, BsHandThumbsUp, BsPencil, BsTrash, 
  BsCheck, BsX, BsPaperclip, BsCode, BsChatDots, BsPeopleFill 
} from 'react-icons/bs';
import './Chat.css';
import '../../styles/UsernameStyles.css';
import '../../styles/MessageColors.css';

/**
 * –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ß–ê–¢–ê - –ß–ò–°–¢–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
 * 1. –¢–æ–ª—å–∫–æ WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–µ—Ç polling)
 * 2. –û–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã - —Å–µ—Ä–≤–µ—Ä (–Ω–µ—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
 * 3. –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Set —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π
 * 4. –ú–∏–Ω–∏–º—É–º state, –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ (refs)
 * 5. –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */

const EmojiIcon = ({ emoji }) => {
  if (emoji === 'üëç') return <BsHandThumbsUp />;
  if (emoji === '‚ù§Ô∏è') return <BsHeart />;
  return <span>{emoji}</span>;
};

const detectLanguage = (code) => {
  if (code.includes('<?php')) return 'php';
  if (code.includes('<!DOCTYPE') || code.includes('<html')) return 'markup';
  if (code.includes('function') && code.includes('=>')) return 'javascript';
  if (code.includes('def ') || code.includes('import ')) return 'python';
  if (code.includes('SELECT') && code.includes('FROM')) return 'sql';
  return 'javascript';
};

function ChatNew() {
  const { user } = useAuth();
  const { loadUnreadCount } = useNotifications();
  const { getSocket } = useWebSocket();

  // –û—Å–Ω–æ–≤–Ω—ã–µ state
  const [chats, setChats] = useState([]);
  const [activeChat, setActiveChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  
  // UI state
  const [messageType, setMessageType] = useState('text');
  const [selectedFile, setSelectedFile] = useState(null);
  const [replyTo, setReplyTo] = useState(null);
  const [editingMessage, setEditingMessage] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [typingUser, setTypingUser] = useState(null);
  const [onlineUsers, setOnlineUsers] = useState(new Set());
  const [showSidebar, setShowSidebar] = useState(true);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  
  // Refs –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const socketRef = useRef(null);
  const activeChatIdRef = useRef(null);
  const messagesEndRef = useRef(null);
  const processedMessageIds = useRef(new Set()); // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ ID
  
  // =============================================================================
  // INITIALIZATION - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  // =============================================================================
  
  useEffect(() => {
    loadInitialData();
    setupSocketListeners();
    
    return () => cleanupSocketListeners();
  }, [user?.id]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadChats(),
        loadOnlineUsers()
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(false);
    }
  };

  // =============================================================================
  // WEBSOCKET SETUP - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π WebSocket
  // =============================================================================
  
  const setupSocketListeners = () => {
    const socket = getSocket();
    if (!socket) {
      console.warn('Socket –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      return;
    }
    
    socketRef.current = socket;
    
    // –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on('new-message', handleNewMessage);
    socket.on('messages-read', handleMessagesRead);
    socket.on('user-online', handleUserOnline);
    socket.on('user-offline', handleUserOffline);
    socket.on('user-typing', handleUserTyping);
    socket.on('user-stop-typing', handleUserStopTyping);
    
    console.log('‚úÖ WebSocket —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  };

  const cleanupSocketListeners = () => {
    const socket = socketRef.current;
    if (!socket) return;
    
    socket.off('new-message', handleNewMessage);
    socket.off('messages-read', handleMessagesRead);
    socket.off('user-online', handleUserOnline);
    socket.off('user-offline', handleUserOffline);
    socket.off('user-typing', handleUserTyping);
    socket.off('user-stop-typing', handleUserStopTyping);
    
    console.log('üßπ WebSocket —Å–ª—É—à–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  };

  // =============================================================================
  // WEBSOCKET HANDLERS - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  // =============================================================================
  
  const handleNewMessage = (message) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.id);
    
    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
    if (processedMessageIds.current.has(message.id)) {
      console.log('‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    processedMessageIds.current.add(message.id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if (activeChatIdRef.current === message.chat_id) {
      setMessages(prev => [...prev, message]);
      scrollToBottom();
    }
    
    // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_message –∏ unread_count
    loadChats();
  };

  const handleMessagesRead = ({ chatId }) => {
    setChats(prev => 
      prev.map(chat => 
        chat.id === chatId ? { ...chat, unread_count: 0 } : chat
      )
    );
  };

  const handleUserOnline = ({ userId }) => {
    setOnlineUsers(prev => new Set([...prev, userId]));
  };

  const handleUserOffline = ({ userId }) => {
    setOnlineUsers(prev => {
      const newSet = new Set(prev);
      newSet.delete(userId);
      return newSet;
    });
  };

  const handleUserTyping = ({ userId, userName, chatId }) => {
    if (userId !== user.id && chatId === activeChatIdRef.current) {
      setTypingUser(userName);
    }
  };

  const handleUserStopTyping = ({ userId }) => {
    if (userId !== user.id) {
      setTypingUser(null);
    }
  };

  // =============================================================================
  // DATA LOADING - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  // =============================================================================
  
  const loadChats = async () => {
    try {
      const response = await api.get('/chat');
      setChats(response.data.chats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    }
  };

  const loadMessages = async (chatId) => {
    try {
      const response = await api.get(`/chat/${chatId}/messages`);
      setMessages(response.data.messages);
      
      // –û—á–∏—â–∞–µ–º processed IDs –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
      processedMessageIds.current.clear();
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ processed
      response.data.messages.forEach(msg => processedMessageIds.current.add(msg.id));
      
      scrollToBottom();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  const loadOnlineUsers = async () => {
    try {
      const response = await api.get('/users/online');
      setOnlineUsers(new Set(response.data.users.map(u => u.id)));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  };

  // =============================================================================
  // CHAT ACTIONS - –î–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–∞–º–∏
  // =============================================================================
  
  const selectChat = async (chat) => {
    console.log('üí¨ –í—ã–±—Ä–∞–Ω —á–∞—Ç:', chat.id);
    
    // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Ç
    if (activeChatIdRef.current && socketRef.current) {
      socketRef.current.emit('leave-chat', activeChatIdRef.current);
    }
    
    setActiveChat(chat);
    activeChatIdRef.current = chat.id;
    setMessages([]);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —á–∞—Ç—É
    if (socketRef.current) {
      socketRef.current.emit('join-chat', chat.id);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await loadMessages(chat.id);
    
    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    markAsRead(chat.id);
    
    if (isMobile) {
      setShowSidebar(false);
    }
  };

  const markAsRead = async (chatId) => {
    try {
      await api.put(`/chat/${chatId}/mark-read`);
      
      if (socketRef.current) {
        socketRef.current.emit('mark-read', chatId);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      loadUnreadCount();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setChats(prev => 
        prev.map(chat => 
          chat.id === chatId ? { ...chat, unread_count: 0 } : chat
        )
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', error);
    }
  };

  // =============================================================================
  // MESSAGE ACTIONS - –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  // =============================================================================
  
  const handleSendMessage = async (e) => {
    e.preventDefault();
    
    if (!newMessage.trim() && !selectedFile) return;
    if (!activeChat) return;
    
    try {
      if (selectedFile) {
        await sendFileMessage();
      } else {
        await sendTextMessage();
      }
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewMessage('');
      setMessageType('text');
      setSelectedFile(null);
      setReplyTo(null);
      setEditingMessage(null);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  };

  const sendTextMessage = async () => {
    const response = await api.post(`/chat/${activeChat.id}/messages`, {
      content: newMessage,
      messageType: messageType,
      codeLanguage: messageType === 'code' ? detectLanguage(newMessage) : null,
      replyTo: replyTo?.id
    });
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data.message.id);
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ - –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ WebSocket
  };

  const sendFileMessage = async () => {
    const formData = new FormData();
    formData.append('file', selectedFile);
    formData.append('caption', newMessage);
    if (replyTo) formData.append('replyTo', replyTo.id);
    
    const response = await api.post(`/chat/${activeChat.id}/upload`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    
    console.log('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response.data.message.id);
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ - –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ WebSocket
  };

  const handleDeleteMessage = async (messageId) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?')) return;
    
    try {
      await api.delete(`/chat/messages/${messageId}`);
      setMessages(prev => prev.filter(m => m.id !== messageId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  const handleEditMessage = async (messageId, content) => {
    try {
      await api.put(`/chat/messages/${messageId}`, { content });
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      loadMessages(activeChat.id);
      setEditingMessage(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  };

  const handleReaction = async (messageId, emoji) => {
    try {
      await api.post(`/chat/messages/${messageId}/reaction`, { emoji });
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ WebSocket event 'reaction-updated'
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏:', error);
    }
  };

  // =============================================================================
  // TYPING INDICATOR - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  // =============================================================================
  
  const handleTyping = (e) => {
    setNewMessage(e.target.value);
    
    if (!socketRef.current || !activeChat) return;
    
    if (e.target.value.length > 0) {
      socketRef.current.emit('typing-start', {
        chatId: activeChat.id,
        userName: user.full_name || user.username
      });
    } else {
      socketRef.current.emit('typing-stop', { chatId: activeChat.id });
    }
  };

  // =============================================================================
  // UTILITY FUNCTIONS - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  // =============================================================================
  
  const scrollToBottom = () => {
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  };

  const filteredMessages = messages.filter(msg => {
    if (!searchQuery) return true;
    return msg.content?.toLowerCase().includes(searchQuery.toLowerCase()) ||
           msg.sender_full_name?.toLowerCase().includes(searchQuery.toLowerCase());
  });

  // =============================================================================
  // RENDER
  // =============================================================================
  
  if (loading) {
    return <div className="chat-page"><div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div></div>;
  }

  return (
    <div className="chat-page">
      {/* Sidebar —Å —á–∞—Ç–∞–º–∏ */}
      {(!isMobile || showSidebar) && (
        <div className="chat-sidebar">
          <h2>–ß–∞—Ç—ã</h2>
          <div className="chat-list">
            {chats.map(chat => (
              <div
                key={chat.id}
                className={`chat-item ${activeChat?.id === chat.id ? 'active' : ''}`}
                onClick={() => selectChat(chat)}
              >
                <div className="chat-info">
                  <div className="chat-name">
                    {chat.type === 'group' ? (
                      <><BsPeopleFill /> {chat.name}</>
                    ) : (
                      chat.other_user?.full_name || chat.other_user?.username
                    )}
                  </div>
                  <div className="chat-last-message">
                    {chat.last_message?.content?.substring(0, 30)}...
                  </div>
                </div>
                {chat.unread_count > 0 && (
                  <div className="unread-badge">{chat.unread_count}</div>
                )}
                {chat.type === 'private' && onlineUsers.has(chat.other_user?.id) && (
                  <div className="online-indicator"></div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      {activeChat ? (
        <div className="chat-main">
          <div className="chat-header">
            <h3>
              {activeChat.type === 'group' ? activeChat.name : activeChat.other_user?.full_name}
            </h3>
            {typingUser && <div className="typing-indicator">{typingUser} –ø–µ—á–∞—Ç–∞–µ—Ç...</div>}
          </div>

          <div className="messages-container">
            {filteredMessages.map(msg => (
              <div
                key={msg.id}
                className={`message ${msg.sender_id === user.id ? 'own' : 'other'}`}
              >
                <div className="message-content">
                  {msg.message_type === 'code' ? (
                    <SyntaxHighlighter language={msg.code_language || 'javascript'} style={vscDarkPlus}>
                      {msg.content}
                    </SyntaxHighlighter>
                  ) : (
                    <p>{msg.content}</p>
                  )}
                </div>
                <div className="message-meta">
                  <span>{new Date(msg.created_at).toLocaleTimeString()}</span>
                  {msg.sender_id === user.id && (
                    <>
                      <button onClick={() => setEditingMessage(msg)}><BsPencil /></button>
                      <button onClick={() => handleDeleteMessage(msg.id)}><BsTrash /></button>
                    </>
                  )}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          <form className="message-input" onSubmit={handleSendMessage}>
            <select value={messageType} onChange={e => setMessageType(e.target.value)}>
              <option value="text">üí¨ –¢–µ–∫—Å—Ç</option>
              <option value="code">üíª –ö–æ–¥</option>
            </select>
            <input
              type="text"
              value={newMessage}
              onChange={handleTyping}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            />
            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
          </form>
        </div>
      ) : (
        <div className="chat-empty">
          <p>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
        </div>
      )}
    </div>
  );
}

export default ChatNew;
