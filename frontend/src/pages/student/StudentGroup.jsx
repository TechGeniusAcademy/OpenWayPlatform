import { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import api, { BASE_URL } from '../../utils/api';
import '../../styles/UsernameStyles.css';
import './StudentGroup.css';
import { AiOutlineWallet, AiOutlineClose, AiOutlineTrophy, AiOutlineStar, AiOutlineSend } from 'react-icons/ai';

function StudentGroup() {
  const { user, updateUser, checkAuth } = useAuth();
  const [groupInfo, setGroupInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [cosmetics, setCosmetics] = useState({ frames: [], banners: [] });
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showTransferForm, setShowTransferForm] = useState(false);
  const [transferAmount, setTransferAmount] = useState('');
  const [transferMessage, setTransferMessage] = useState('');
  const [transfering, setTransfering] = useState(false);
  const [transferError, setTransferError] = useState('');

  useEffect(() => {
    loadGroupInfo();
    loadCosmetics();
  }, [user]);

  const loadCosmetics = async () => {
    try {
      const [framesRes, bannersRes] = await Promise.all([
        api.get('/shop/items?type=frame'),
        api.get('/shop/items?type=banner')
      ]);
      setCosmetics({
        frames: framesRes.data.items,
        banners: bannersRes.data.items
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏:', error);
    }
  };

  const loadGroupInfo = async () => {
    if (!user?.group_id) {
      setLoading(false);
      return;
    }

    try {
      const response = await api.get(`/groups/${user.group_id}`);
      setGroupInfo(response.data.group);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:', error);
    } finally {
      setLoading(false);
    }
  };

  const getFrameImage = (frameKey) => {
    if (!frameKey || frameKey === 'none') return null;
    const frame = cosmetics.frames.find(f => f.item_key === frameKey);
    return frame?.image_url ? `${BASE_URL}${frame.image_url}` : null;
  };

  const getBannerImage = (bannerKey) => {
    if (!bannerKey || bannerKey === 'default') return null;
    const banner = cosmetics.banners.find(b => b.item_key === bannerKey);
    return banner?.image_url ? `${BASE_URL}${banner.image_url}` : null;
  };

  const openStudentProfile = (student) => {
    setSelectedStudent(student);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setShowTransferForm(false);
    setTransferAmount('');
    setTransferMessage('');
    setTransferError('');
    setTimeout(() => setSelectedStudent(null), 300);
  };

  const handleTransferPoints = async (e) => {
    e.preventDefault();
    
    if (!transferAmount || transferAmount <= 0) {
      setTransferError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤');
      return;
    }

    if (transferAmount > user.points) {
      setTransferError('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤');
      return;
    }

    try {
      setTransfering(true);
      setTransferError('');
      const response = await api.post('/points/transfer', {
        recipient_id: selectedStudent.id,
        amount: parseInt(transferAmount),
        message: transferMessage
      });

      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await checkAuth();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      await loadGroupInfo();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ñ–æ—Ä–º—É
      closeModal();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –±–∞–ª–ª–æ–≤:', error);
      setTransferError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –±–∞–ª–ª–æ–≤');
    } finally {
      setTransfering(false);
    }
  };

  if (loading) {
    return (
      <div className="student-page">
        <div className="page-header">
          <h1>–ú–æ—è –≥—Ä—É–ø–ø–∞</h1>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!groupInfo) {
    return (
      <div className="student-page">
        <div className="page-header">
          <h1>–ú–æ—è –≥—Ä—É–ø–ø–∞</h1>
          <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ</p>
        </div>

        <div className="empty-state">
          <div className="empty-state-icon">üë•</div>
          <h3>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ</h3>
          <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É</p>
        </div>
      </div>
    );
  }

  return (
    <div className="student-page">
      <div className="page-header">
        <h1>–ú–æ—è –≥—Ä—É–ø–ø–∞: {groupInfo.name}</h1>
        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ</p>
      </div>

      <div className="group-info-card">
        <div className="group-info-section">
          <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</h3>
          <div className="profile-info-grid">
            <div className="info-row">
              <span className="info-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
              <span className="info-value">{groupInfo.name}</span>
            </div>
            {groupInfo.description && (
              <div className="info-row">
                <span className="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                <span className="info-value">{groupInfo.description}</span>
              </div>
            )}
            <div className="info-row">
              <span className="info-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</span>
              <span className="info-value">{groupInfo.students?.length || 0} —á–µ–ª–æ–≤–µ–∫</span>
            </div>
            <div className="info-row">
              <span className="info-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
              <span className="info-value">
                {new Date(groupInfo.created_at).toLocaleDateString('ru-RU')}
              </span>
            </div>
          </div>
        </div>

        {groupInfo.students && groupInfo.students.length > 0 && (
          <div className="group-info-section">
            <h3>–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã</h3>
            <div className="students-list">
              {groupInfo.students.map((student) => {
                const frameImage = getFrameImage(student.avatar_frame);
                const bannerImage = getBannerImage(student.profile_banner);
                const defaultBanner = student.profile_banner === 'default' 
                  ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                  : 'rgba(0, 0, 0, 0.05)';

                return (
                  <div 
                    key={student.id} 
                    className="student-list-item"
                    onClick={() => openStudentProfile(student)}
                    style={{
                      backgroundImage: bannerImage 
                        ? `url(${bannerImage})` 
                        : defaultBanner,
                      backgroundSize: 'cover',
                      backgroundPosition: 'center',
                      position: 'relative',
                      overflow: 'hidden',
                      cursor: 'pointer'
                    }}
                  >
                    {(bannerImage || student.profile_banner === 'default') && (
                      <div className="student-item-overlay"></div>
                    )}
                    
                    <div className="student-avatar-wrapper">
                      <div className="student-avatar">
                        {student.avatar_url ? (
                          <img src={`${BASE_URL}${student.avatar_url}`} alt={student.username} />
                        ) : (
                          (student.full_name || student.username).charAt(0).toUpperCase()
                        )}
                      </div>
                      {frameImage && (
                        <img 
                          src={frameImage}
                          alt="Frame"
                          className="student-avatar-frame"
                        />
                      )}
                    </div>
                    
                    <div className="student-info">
                      <strong className={`styled-username ${student.username_style || 'username-none'}`}>
                        {student.full_name || student.username}
                      </strong>
                      <small>{student.email}</small>
                      <div className="student-points"><AiOutlineWallet className="points-inline" /> {student.points || 0} –±–∞–ª–ª–æ–≤</div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
      {showModal && selectedStudent && (
        <div className="student-profile-modal-overlay" onClick={closeModal}>
          <div className="student-profile-modal" onClick={(e) => e.stopPropagation()}>
            <button className="modal-close-btn" onClick={closeModal}>
              <AiOutlineClose />
            </button>

            {/* –ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è */}
            <div 
              className="modal-profile-banner"
              style={{
                backgroundImage: getBannerImage(selectedStudent.profile_banner)
                  ? `url(${getBannerImage(selectedStudent.profile_banner)})`
                  : selectedStudent.profile_banner === 'default'
                    ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                    : 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',
                backgroundSize: 'cover',
                backgroundPosition: 'center'
              }}
            >
              <div className="modal-banner-overlay"></div>
            </div>

            {/* –ê–≤–∞—Ç–∞—Ä —Å —Ä–∞–º–∫–æ–π */}
            <div className="modal-avatar-section">
              <div className="modal-avatar-wrapper">
                <div className="modal-avatar">
                  {selectedStudent.avatar_url ? (
                    <img src={`${BASE_URL}${selectedStudent.avatar_url}`} alt={selectedStudent.username} />
                  ) : (
                    <span className="avatar-letter">
                      {(selectedStudent.full_name || selectedStudent.username).charAt(0).toUpperCase()}
                    </span>
                  )}
                </div>
                {getFrameImage(selectedStudent.avatar_frame) && (
                  <img 
                    src={getFrameImage(selectedStudent.avatar_frame)}
                    alt="Frame"
                    className="modal-avatar-frame"
                  />
                )}
              </div>
              
              <div className="modal-user-info">
                <h2 className={`styled-username ${selectedStudent.username_style || 'username-none'}`}>
                  {selectedStudent.full_name || selectedStudent.username}
                </h2>
                <p className="modal-username">@{selectedStudent.username}</p>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ */}
            <div className="modal-info-section">
              <div className="modal-stats">
                <div className="modal-stat-card">
                  <div className="stat-icon">
                    <AiOutlineWallet />
                  </div>
                  <div className="stat-info">
                    <span className="stat-value">{selectedStudent.points || 0}</span>
                    <span className="stat-label">–ë–∞–ª–ª–æ–≤</span>
                  </div>
                </div>

                <div className="modal-stat-card">
                  <div className="stat-icon">
                    <AiOutlineTrophy />
                  </div>
                  <div className="stat-info">
                    <span className="stat-value">{selectedStudent.rank || '–ù–æ–≤–∏—á–æ–∫'}</span>
                    <span className="stat-label">–†–∞–Ω–≥</span>
                  </div>
                </div>

                <div className="modal-stat-card">
                  <div className="stat-icon">
                    <AiOutlineStar />
                  </div>
                  <div className="stat-info">
                    <span className="stat-value">{selectedStudent.level || 1}</span>
                    <span className="stat-label">–£—Ä–æ–≤–µ–Ω—å</span>
                  </div>
                </div>
              </div>

              <div className="modal-details">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className="modal-details-grid">
                  <div className="detail-row">
                    <span className="detail-label">Email:</span>
                    <span className="detail-value">{selectedStudent.email}</span>
                  </div>
                  {selectedStudent.phone && (
                    <div className="detail-row">
                      <span className="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                      <span className="detail-value">{selectedStudent.phone}</span>
                    </div>
                  )}
                  <div className="detail-row">
                    <span className="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span className="detail-value">
                      <span className={`status-badge ${selectedStudent.is_online ? 'online' : 'offline'}`}>
                        {selectedStudent.is_online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                      </span>
                    </span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                    <span className="detail-value">
                      {new Date(selectedStudent.created_at).toLocaleDateString('ru-RU', {
                        day: 'numeric',
                        month: 'long',
                        year: 'numeric'
                      })}
                    </span>
                  </div>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –±–∞–ª–ª–æ–≤ */}
              {selectedStudent.id !== user.id && (
                <div className="modal-transfer-section">
                  {!showTransferForm ? (
                    <button 
                      className="transfer-points-btn"
                      onClick={() => setShowTransferForm(true)}
                    >
                      <AiOutlineSend />
                      –ü–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã
                    </button>
                  ) : (
                    <form className="transfer-form" onSubmit={handleTransferPoints}>
                      <h3>–ü–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã</h3>
                      <p className="transfer-info">
                        –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {selectedStudent.full_name || selectedStudent.username}
                      </p>
                      <p className="your-balance">
                        –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{user.points} –±–∞–ª–ª–æ–≤</strong>
                      </p>
                      
                      <div className="form-group">
                        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</label>
                        <input
                          type="number"
                          min="1"
                          max={user.points}
                          value={transferAmount}
                          onChange={(e) => setTransferAmount(e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                          required
                          disabled={transfering}
                        />
                      </div>

                      <div className="form-group">
                        <label>–°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                        <textarea
                          value={transferMessage}
                          onChange={(e) => setTransferMessage(e.target.value)}
                          placeholder="–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                          rows="3"
                          disabled={transfering}
                        />
                      </div>

                      {transferError && (
                        <div className="transfer-error">
                          {transferError}
                        </div>
                      )}

                      <div className="transfer-actions">
                        <button 
                          type="button" 
                          className="cancel-btn"
                          onClick={() => {
                            setShowTransferForm(false);
                            setTransferAmount('');
                            setTransferMessage('');
                            setTransferError('');
                          }}
                          disabled={transfering}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                        <button 
                          type="submit" 
                          className="submit-btn"
                          disabled={transfering || !transferAmount}
                        >
                          {transfering ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                        </button>
                      </div>
                    </form>
                  )}
                </div>
              )}

              {/* –ö–æ—Å–º–µ—Ç–∏–∫–∞ */}
              <div className="modal-cosmetics">
                <h3>–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞</h3>
                <div className="cosmetics-grid">
                  <div className="cosmetic-item">
                    <span className="cosmetic-label">–†–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞:</span>
                    <span className="cosmetic-value">
                      {selectedStudent.avatar_frame && selectedStudent.avatar_frame !== 'none' 
                        ? cosmetics.frames.find(f => f.item_key === selectedStudent.avatar_frame)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                    </span>
                  </div>
                  <div className="cosmetic-item">
                    <span className="cosmetic-label">–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è:</span>
                    <span className="cosmetic-value">
                      {selectedStudent.profile_banner && selectedStudent.profile_banner !== 'default'
                        ? cosmetics.banners.find(b => b.item_key === selectedStudent.profile_banner)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        : '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}
                    </span>
                  </div>
                  <div className="cosmetic-item">
                    <span className="cosmetic-label">–°—Ç–∏–ª—å –Ω–∏–∫–Ω–µ–π–º–∞:</span>
                    <span className="cosmetic-value">
                      {selectedStudent.username_style && selectedStudent.username_style !== 'username-none'
                        ? selectedStudent.username_style.replace('username-', '').toUpperCase()
                        : '–û–±—ã—á–Ω—ã–π'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default StudentGroup;
