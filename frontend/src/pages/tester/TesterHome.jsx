import { useState, useEffect } from 'react';
import api from '../../utils/api';
import { 
  BsPeople, 
  BsCollection, 
  BsFileText, 
  BsBug,
  BsPlay,
  BsTrash,
  BsArrowRepeat
} from 'react-icons/bs';
import './TesterHome.css';

function TesterHome() {
  const [stats, setStats] = useState({
    users: 0,
    groups: 0,
    tests: 0,
    bugs: 0
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      const [usersRes, groupsRes, testsRes] = await Promise.all([
        api.get('/users'),
        api.get('/groups'),
        api.get('/tests')
      ]);

      setStats({
        users: usersRes.data.users?.length || 0,
        groups: groupsRes.data.groups?.length || 0,
        tests: testsRes.data.tests?.length || 0,
        bugs: 0 // –ë—É–¥–µ—Ç –∏–∑ backend
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const runStressTest = async (type) => {
    try {
      await api.post('/testing/stress-test', { type });
      alert(`–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç "${type}" –∑–∞–ø—É—â–µ–Ω!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞');
    }
  };

  const generateTestData = async () => {
    try {
      await api.post('/testing/generate-data');
      alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
      loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const clearTestData = async () => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ?')) return;
    
    try {
      await api.delete('/testing/clear-data');
      alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!');
      loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  if (loading) {
    return <div className="tester-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="tester-home">
      <div className="tester-header">
        <h1>üß™ Testing Dashboard</h1>
        <p>–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</p>
      </div>

      <div className="stats-grid">
        <div className="stat-card users">
          <div className="stat-icon">
            <BsPeople />
          </div>
          <div className="stat-info">
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
            <p className="stat-value">{stats.users}</p>
          </div>
        </div>

        <div className="stat-card groups">
          <div className="stat-icon">
            <BsCollection />
          </div>
          <div className="stat-info">
            <h3>–ì—Ä—É–ø–ø—ã</h3>
            <p className="stat-value">{stats.groups}</p>
          </div>
        </div>

        <div className="stat-card tests">
          <div className="stat-icon">
            <BsFileText />
          </div>
          <div className="stat-info">
            <h3>–¢–µ—Å—Ç—ã</h3>
            <p className="stat-value">{stats.tests}</p>
          </div>
        </div>

        <div className="stat-card bugs">
          <div className="stat-icon">
            <BsBug />
          </div>
          <div className="stat-info">
            <h3>–ë–∞–≥–∏</h3>
            <p className="stat-value">{stats.bugs}</p>
          </div>
        </div>
      </div>

      <div className="quick-actions">
        <h2>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
        <div className="actions-grid">
          <button 
            className="action-btn stress"
            onClick={() => runStressTest('users')}
          >
            <BsPlay />
            <span>–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
          </button>

          <button 
            className="action-btn stress"
            onClick={() => runStressTest('chat')}
          >
            <BsPlay />
            <span>–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —á–∞—Ç–∞</span>
          </button>

          <button 
            className="action-btn generate"
            onClick={generateTestData}
          >
            <BsArrowRepeat />
            <span>–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
          </button>

          <button 
            className="action-btn danger"
            onClick={clearTestData}
          >
            <BsTrash />
            <span>–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
          </button>
        </div>
      </div>

      <div className="testing-tips">
        <h3>üí° –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
        <ul>
          <li><strong>Users Testing:</strong> –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
          <li><strong>Groups Testing:</strong> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≥—Ä—É–ø–ø</li>
          <li><strong>Tests Testing:</strong> –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π</li>
          <li><strong>Chat Testing:</strong> –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã —á–∞—Ç–∞ –∏ WebSocket</li>
          <li><strong>System Logs:</strong> –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
          <li><strong>Bug Reports:</strong> –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤</li>
          <li><strong>Performance:</strong> –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API</li>
        </ul>
      </div>
    </div>
  );
}

export default TesterHome;
