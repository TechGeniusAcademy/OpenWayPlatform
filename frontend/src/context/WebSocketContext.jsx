import { createContext, useContext, useEffect, useRef } from 'react';
import { useAuth } from './AuthContext';
import io from 'socket.io-client';

const WebSocketContext = createContext();

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOCKET_URL –¥–ª—è production –∏ development
const getSocketUrl = () => {
  const apiUrl = import.meta.env.VITE_API_URL;
  if (apiUrl) {
    return apiUrl.replace('/api', '');
  }
  return 'http://localhost:5000';
};

const SOCKET_URL = getSocketUrl();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π singleton socket - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let globalSocket = null;
let globalSocketUserId = null;
let connectionTimeout = null;

const createSocket = (userId) => {
  // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (connectionTimeout) {
    clearTimeout(connectionTimeout);
  }

  // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —Ç–µ–º –∂–µ userId, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (globalSocket && globalSocket.connected && globalSocketUserId === userId) {
    console.log('WebSocket: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
    return globalSocket;
  }

  // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ userId –∏–∑–º–µ–Ω–∏–ª—Å—è
  if (globalSocket && globalSocket.connected && globalSocketUserId !== userId) {
    console.log('WebSocket: –û–±–Ω–æ–≤–ª—è–µ–º userId —Å', globalSocketUserId, '–Ω–∞', userId);
    globalSocketUserId = userId;
    globalSocket.emit('register', userId);
    return globalSocket;
  }

  // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
  if (globalSocket && !globalSocket.connected) {
    console.log('WebSocket: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ–∫–µ—Ç');
    globalSocketUserId = userId;
    globalSocket.connect();
    return globalSocket;
  }

  console.log('WebSocket: –°–æ–∑–¥–∞—ë–º –ù–û–í–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫', SOCKET_URL);
  
  globalSocket = io(SOCKET_URL, {
    transports: ['websocket'],
    reconnection: true,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    reconnectionAttempts: 3,
    timeout: 10000,
    autoConnect: true,
    forceNew: false,
    multiplex: true
  });
  
  globalSocketUserId = userId;
  
  globalSocket.on('connect', () => {
    console.log('üîå WebSocket –ü–û–î–ö–õ–Æ–ß–ï–ù, ID:', globalSocket.id);
    if (globalSocketUserId) {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ register –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', globalSocketUserId);
      globalSocket.emit('register', globalSocketUserId);
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ user-online –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      globalSocket.emit('set-online', globalSocketUserId);
    }
  });

  globalSocket.on('disconnect', (reason) => {
    console.log('üîå WebSocket –û–¢–ö–õ–Æ–ß–ï–ù, –ø—Ä–∏—á–∏–Ω–∞:', reason);
  });

  globalSocket.on('connect_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error.message);
  });

  globalSocket.on('reconnect', (attemptNumber) => {
    console.log('üîÑ WebSocket –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù –ø–æ—Å–ª–µ', attemptNumber, '–ø–æ–ø—ã—Ç–æ–∫');
    if (globalSocketUserId) {
      console.log('üì§ –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º register –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è:', globalSocketUserId);
      globalSocket.emit('register', globalSocketUserId);
      globalSocket.emit('set-online', globalSocketUserId);
    }
  });

  return globalSocket;
};

export function WebSocketProvider({ children }) {
  const { user } = useAuth();
  const socketRef = useRef(null);

  useEffect(() => {
    console.log('WebSocketContext: useEffect –≤—ã–∑–≤–∞–Ω, user:', user?.id);
    
    if (!user) {
      console.log('WebSocketContext: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
      if (globalSocket) {
        console.log('WebSocket: –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        globalSocket.disconnect();
        globalSocket.removeAllListeners();
        globalSocket = null;
        globalSocketUserId = null;
      }
      socketRef.current = null;
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫–µ—Ç
    socketRef.current = createSocket(user.id);

    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (connectionTimeout) {
        clearTimeout(connectionTimeout);
      }
    };
  }, [user?.id]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getSocket –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π
  const getSocket = (() => {
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∑–∞–º—ã–∫–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
    return () => socketRef.current;
  })();

  return (
    <WebSocketContext.Provider value={{ getSocket }}>
      {children}
    </WebSocketContext.Provider>
  );
}

export function useWebSocket() {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WebSocketProvider');
  }
  return context;
}
