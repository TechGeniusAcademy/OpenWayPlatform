import { createContext, useContext, useEffect, useRef } from 'react';
import { useAuth } from './AuthContext';
import io from 'socket.io-client';

const WebSocketContext = createContext();

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOCKET_URL –¥–ª—è production –∏ development
const getSocketUrl = () => {
  const apiUrl = import.meta.env.VITE_API_URL;
  if (apiUrl) {
    return apiUrl.replace('/api', '');
  }
  return 'http://localhost:5000';
};

const SOCKET_URL = getSocketUrl();

export function WebSocketProvider({ children }) {
  const { user } = useAuth();
  const socketRef = useRef(null);

  useEffect(() => {
    console.log('WebSocketContext: useEffect –≤—ã–∑–≤–∞–Ω, user:', user?.id);
    
    if (!user) {
      console.log('WebSocketContext: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º socket');
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
      if (socketRef.current) {
        socketRef.current.disconnect();
        socketRef.current = null;
      }
      return;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!socketRef.current || !socketRef.current.connected) {
      console.log('WebSocketContext: –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫', SOCKET_URL);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ–∫–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
      
      socketRef.current = io(SOCKET_URL, {
        transports: ['polling', 'websocket'],
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionAttempts: 10,
        timeout: 10000
      });
      
      socketRef.current.on('connect', () => {
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, ID:', socketRef.current.id);
        console.log('WebSocketContext: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', user.id);
        socketRef.current.emit('register', user.id);
      });

      socketRef.current.on('disconnect', (reason) => {
        console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞:', reason);
      });

      socketRef.current.on('connect_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error.message);
      });

      socketRef.current.on('reconnect', (attemptNumber) => {
        console.log('üîÑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ', attemptNumber, '–ø–æ–ø—ã—Ç–æ–∫');
        socketRef.current.emit('register', user.id);
      });
    }

    return () => {
      // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
    };
  }, [user?.id]);

  const getSocket = () => socketRef.current;

  return (
    <WebSocketContext.Provider value={{ getSocket }}>
      {children}
    </WebSocketContext.Provider>
  );
}

export function useWebSocket() {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WebSocketProvider');
  }
  return context;
}
